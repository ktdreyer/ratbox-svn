$! static_modules_c.com: Generates our static module list
$! $Id$
$!
$ CREATE STATIC_MODULES.C
$ DECK
/*
 *  This file is automatically generated: do not modify
 *  ircd-ratbox: A slightly useful ircd
 *
 *  Copyright (C) 2003 Aaron Sethman <androsyn@ratbox.org>
 *  Copyright (C) 2003 ircd-ratbox development team
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 *  USA
 *  
 */
#include "stdinc.h"
#include "modules.h"
#include "hash.h"
#include "s_log.h"

$ EOD
$
$ OPEN/APPEND OUTPUT STATIC_MODULES.C
$
$ HEADERS:
$	FILE = F$SEARCH("SYS$DISK:[]M_*.C")
$	IF FILE .NES. ""
$	THEN
$		FILE = F$EDIT( - 
			F$ELEMENT(1, "_", -
			 F$ELEMENT(0, ".", -
			  F$EXTRACT(F$LOCATE("]", FILE) + 1, F$LENGTH(FILE), FILE))), -
			 "LOWERCASE")
$		WRITE OUTPUT "extern struct mapi_header_av1 ''FILE'_mheader;"
$		GOTO HEADERS
$	ENDIF
$
$ WRITE OUTPUT "static const struct mapi_header_av1 *mapi_headers[] = {"
$ DEFS:
$	FILE = F$SEARCH("SYS$DISK:[]M_*.C")
$	IF FILE .NES. ""
$	THEN
$		FILE = F$EDIT( -
		 F$ELEMENT(1, "_", -
		  F$ELEMENT(0, ".", -
		   F$EXTRACT(F$LOCATE("]", FILE) + 1, F$LENGTH(FILE), FILE))), -
		 "LOWERCASE")
$		WRITE OUTPUT "&''FILE'_mheader,"
$		GOTO DEFS
$	ENDIF
$
$ WRITE OUTPUT "};"
$
$ WRITE OUTPUT ""
$ WRITE OUTPUT "void ''P1'(void)"
$ WRITE OUTPUT "{"
$ WRITE OUTPUT "	int x;"
$ WRITE OUTPUT "	int *mapi_version;"
$ WRITE OUTPUT "	for(x = 0; mapi_headers[x] != NULL; x++)"
$ WRITE OUTPUT "	{"
$ WRITE OUTPUT "		mapi_version = (int *)mapi_headers[x];"
$ WRITE OUTPUT "		if(MAPI_MAGIC(*mapi_version) != MAPI_MAGIC_HDR)"
$ WRITE OUTPUT "		{"
$ WRITE OUTPUT "			ilog(L_ERROR, ""Error: linked in module without a MAPI header..giving up"");"
$ WRITE OUTPUT "			exit(70);"
$ WRITE OUTPUT "		} 	"
$ WRITE OUTPUT "		switch(MAPI_VERSION(*mapi_version))"
$ WRITE OUTPUT "		{"
$ WRITE OUTPUT "			case 1:"
$ WRITE OUTPUT "			{"
$ WRITE OUTPUT "				struct mapi_mheader_av1 *mheader = (struct mapi_mheader_av1*)mapi_version;"
$ WRITE OUTPUT "				if (mheader->mapi_register && (mheader->mapi_register() == -1))"
$ WRITE OUTPUT "				{"
$ WRITE OUTPUT "					ilog(L_ERROR, ""Error: linked in module failed loading..giving up"");"
$ WRITE OUTPUT "					exit(70);"
$ WRITE OUTPUT "				}"
$ WRITE OUTPUT "				"
$ WRITE OUTPUT "				if(mheader->mapi_command_list)"
$ WRITE OUTPUT "				{"
$ WRITE OUTPUT "					struct Message **m;"
$ WRITE OUTPUT "					for(m = mheader->mapi_command_list; *m; ++m)"
$ WRITE OUTPUT "						mod_add_cmd(*m);"
$ WRITE OUTPUT "				}"
$ WRITE OUTPUT "				"
$ WRITE OUTPUT "				if(mheader->mapi_hook_list)"
$ WRITE OUTPUT "				{"
$ WRITE OUTPUT "					mapi_hlist_av1 *m;"
$ WRITE OUTPUT "					for(m = mheader->mapi_hook_list; m->hapi_name; ++m)"
$ WRITE OUTPUT "						hook_add_event(m->hapi_name, m->hapi_id);"
$ WRITE OUTPUT "				}	"
$ WRITE OUTPUT "				"
$ WRITE OUTPUT "				if(mheader->mapi_hfn_list)"
$ WRITE OUTPUT "				{"
$ WRITE OUTPUT "					mapi_hfn_list_av1 *m;"
$ WRITE OUTPUT "					for(m = mheader->mapi_hfn_list; m->hapi_name; ++m)"
$ WRITE OUTPUT "						hook_add_hook(m->hapi_name, m->fn);"
$ WRITE OUTPUT "						"
$ WRITE OUTPUT "				}"
$ WRITE OUTPUT "				"
$ WRITE OUTPUT "				break;"
$ WRITE OUTPUT "			"
$ WRITE OUTPUT "			}	"
$ WRITE OUTPUT "			default:"
$ WRITE OUTPUT "			{"
$ WRITE OUTPUT "				ilog(L_ERROR, ""Error: Unknown MAPI version in linked in module..giving up"");"
$ WRITE OUTPUT "				exit(70);"
$ WRITE OUTPUT "			}				"
$ WRITE OUTPUT "		}                                        "
$ WRITE OUTPUT "	}"
$ WRITE OUTPUT "}"
$
$ CLOSE OUTPUT
