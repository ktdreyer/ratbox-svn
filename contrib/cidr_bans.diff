? buf.txt
? contrib/cidr_bans.diff
? modules/core/m_killprotect.c
? src/linebuf.c.diff
? src/log
Index: include/irc_string.h
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/include/irc_string.h,v
retrieving revision 7.36
diff -u -r7.36 irc_string.h
--- include/irc_string.h	24 May 2002 23:34:07 -0000	7.36
+++ include/irc_string.h	7 Aug 2002 00:43:11 -0000
@@ -30,9 +30,11 @@
  * match - returns 1 on successful match, 0 otherwise
  *
  * match_esc - compare with support for escaping chars
+ * match_cidr - compares u!h@addr with u!h@addr/cidr
  */
 extern int match(const char *mask, const char *name);
 extern int match_esc(const char *mask, const char *name);
+extern int match_cidr(const char *mask, const char *name);
 
 /*
  * collapse - collapse a string in place, converts multiple adjacent *'s 
Index: src/channel.c
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/src/channel.c,v
retrieving revision 7.325
diff -u -r7.325 channel.c
--- src/channel.c	12 Jul 2002 01:24:03 -0000	7.325
+++ src/channel.c	7 Aug 2002 00:43:11 -0000
@@ -1114,7 +1114,9 @@
   for (ban = chptr->banlist.head; ban; ban = ban->next)
   {
     actualBan = ban->data;
-    if (match(actualBan->banstr, s) || match(actualBan->banstr, s2))
+    if (match(actualBan->banstr, s) || 
+    	match(actualBan->banstr, s2) ||
+        match_cidr(actualBan->banstr, s2))
       break;
     else
       actualBan = NULL;
@@ -1126,7 +1128,9 @@
     {
       actualExcept = except->data;
 
-      if (match(actualExcept->banstr, s) || match(actualExcept->banstr, s2))
+      if (match(actualExcept->banstr, s) || 
+          match(actualExcept->banstr, s2) ||
+          match_cidr(actualExcept->banstr, s2))
       {
         return CHFL_EXCEPTION;
       }
@@ -1176,7 +1180,8 @@
       for (ptr = chptr->invexlist.head; ptr; ptr = ptr->next)
       {
         invex = ptr->data;
-        if (match(invex->banstr, src_host) || match(invex->banstr, src_iphost))
+        if (match(invex->banstr, src_host) || match(invex->banstr, src_iphost) ||
+            match_cidr(invex->banstr, src_iphost))
           break;
       }
       if (ptr == NULL)
Index: src/match.c
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/src/match.c,v
retrieving revision 7.20
diff -u -r7.20 match.c
--- src/match.c	31 May 2002 02:21:04 -0000	7.20
+++ src/match.c	7 Aug 2002 00:43:11 -0000
@@ -207,6 +207,73 @@
   return 0;
 }
 
+static inline int 
+comp_with_mask(void *addr, void *dest, u_int mask)
+{
+  if (memcmp(addr, dest, mask / 8) == 0) 
+  {
+    int n = mask / 8;
+    int m = ((-1) << (8 - (mask % 8)));
+    if (mask % 8 == 0 || 
+       (((u_char *) addr)[n] & m) == (((u_char *) dest)[n] & m))  
+      return (1);
+  }
+  return (0);
+}
+
+
+/* match_cidr()
+ *
+ * Input - mask, address
+ * Ouput - 1 = Matched 0 = Did not match
+ */
+
+int
+match_cidr(const char *s1, const char *s2)
+{
+  struct irc_inaddr ipaddr, maskaddr;
+  char address[NICKLEN + USERLEN + HOSTLEN + 6], mask[NICKLEN + USERLEN + HOSTLEN + 6], *ipmask, *ip, *len;
+  int cidrlen, aftype;
+  strcpy(mask, s1);
+  strcpy(address, s2);
+  
+  ipmask = strrchr(mask, '@');
+  if(mask == NULL)
+    return 0;
+  
+  *ipmask++ = '\0';
+  
+  ip = strrchr(address, '@');
+  *ip++ = '\0';
+  
+  len = strrchr(ipmask, '/');
+  if(len == NULL)
+    return 0;
+  
+  *len++ = '\0';
+  
+  cidrlen = atoi(len);
+  if(cidrlen == 0) 
+    return 0;
+  
+#ifdef IPV6
+  if(strchr(ip, ':') && strchr(ipmask, ':'))
+    aftype = AF_INET6;
+  else
+#endif
+  if(!strchr(ip, ':') && !strchr(ipmask, ':'))
+    aftype = AF_INET;
+  else
+    return 0;
+  
+  inetpton(aftype, ip, &ipaddr);
+  inetpton(aftype, ipmask, &maskaddr);
+  if(comp_with_mask(&IN_ADDR(ipaddr), &IN_ADDR(maskaddr), cidrlen) && match(mask, address))
+    return 1;
+  else
+    return 0;
+}
+
 /* collapse()
  *
  * collapses a string containing multiple *'s.
