remote-unkline.diff

This patch adds support for remote unklines to hybrid7.

This patch modifies the shared {}; block setup, adding two options
to control whether a remote oper may kline on this server, unkline
on this server, or both.  By default remote kline is allowed and
remote unkline is forbidden.  The two options are:
   "kline = <yes|no>;"
   "unkline = <yes|no>;"

To issue a remote unkline:
   /quote unkline <user@host> on <server>

The server may contain wildcards, the same as remote klines.

This patch is used at your own risk and is not an official
ircd-hybrid patch.

--
Lee H <lee@leeh.co.uk>


Index: include/s_conf.h
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/include/s_conf.h,v
retrieving revision 7.179
diff -u -r7.179 s_conf.h
--- include/s_conf.h	25 Apr 2002 17:53:18 -0000	7.179
+++ include/s_conf.h	26 Apr 2002 12:49:46 -0000
@@ -356,7 +356,7 @@
 extern char *oper_flags_as_string(int);
 extern char *oper_privs_as_string(struct Client *, int);
 
-extern int find_u_conf(char*, char*, char *);
+extern int find_u_conf(char*, char*, char *, int);
 extern struct ConfItem *find_x_conf(char*);
 
 extern struct ConfItem* find_tkline(const char*, const char*, struct irc_inaddr *);
Index: include/s_serv.h
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/include/s_serv.h,v
retrieving revision 7.65
diff -u -r7.65 s_serv.h
--- include/s_serv.h	13 Mar 2002 03:28:08 -0000	7.65
+++ include/s_serv.h	26 Apr 2002 12:49:46 -0000
@@ -79,12 +79,13 @@
 
 #define CAP_TBURST	0x00040000   /* supports TBURST */
 #define CAP_PARA	0x00080000   /* supports invite broadcasting for +p */
+#define CAP_UNKLN	0x00100000   /* supports remote unkline */
 
 #define CAP_MASK        (CAP_QS  | CAP_EX   | CAP_CHW  | \
                          CAP_IE  | CAP_EOB  | CAP_KLN  | \
                          CAP_GLN | CAP_HOPS | CAP_AOPS | \
                          CAP_UID | CAP_ZIP  | CAP_ENC | \
-                         CAP_KNOCK  | CAP_PARA)
+                         CAP_KNOCK  | CAP_PARA | CAP_UNKLN)
 
 #ifdef HAVE_LIBZ
 #define CAP_ZIP_SUPPORTED       CAP_ZIP
Index: modules/m_kline.c
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/modules/m_kline.c,v
retrieving revision 1.100
diff -u -r1.100 m_kline.c
--- modules/m_kline.c	26 Apr 2002 11:51:19 -0000	1.100
+++ modules/m_kline.c	26 Apr 2002 12:49:47 -0000
@@ -326,7 +326,8 @@
 
   tkline_time = atoi(parv[2]);
 
-  if(find_u_conf((char *)source_p->user->server, source_p->username, source_p->host))
+  if(find_u_conf((char *)source_p->user->server, source_p->username, 
+	         source_p->host, FLAGS2_OPER_K))
     {
       sendto_realops_flags(FLAGS_ALL, L_ALL,
 			   "*** Received K-Line for [%s@%s] [%s], from %s!%s@%s on %s",
Index: modules/m_unkline.c
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/modules/m_unkline.c,v
retrieving revision 1.44
diff -u -r1.44 m_unkline.c
--- modules/m_unkline.c	7 Mar 2002 06:21:48 -0000	1.44
+++ modules/m_unkline.c	26 Apr 2002 12:49:48 -0000
@@ -41,6 +41,7 @@
 #include "s_gline.h"
 #include "parse.h"
 #include "modules.h"
+#include "s_serv.h"
 
 #include <stdio.h>
 #include <time.h>
@@ -48,12 +49,13 @@
 #include <unistd.h>
 
 static void mo_unkline(struct Client*, struct Client*, int, char**);
+static void ms_unkline(struct Client*, struct Client*, int, char**);
 static void mo_undline(struct Client*, struct Client*, int, char**);
 static void mo_ungline(struct Client*, struct Client*, int, char**);
 
 struct Message msgtabs[] = {
   {"UNKLINE", 0, 0, 2, 0, MFLG_SLOW, 0,
-   {m_unregistered, m_not_oper, m_error, mo_unkline}},
+   {m_unregistered, m_not_oper, ms_unkline, mo_unkline}},
   {"UNDLINE", 0, 0, 2, 0, MFLG_SLOW, 0,
    {m_unregistered, m_not_oper, m_error, mo_undline}}, 
   {"UNGLINE", 0, 0, 2, 0, MFLG_SLOW, 0,
@@ -79,6 +81,7 @@
 const char *_version = "$Revision$";
 #endif
 
+static void remove_permkline_match(struct Client *, char *, char *);
 static int flush_write(struct Client *, FBFILE* , char *, char *);
 static int remove_tkline_match(char *,char *);
 
@@ -96,19 +99,14 @@
 static void mo_unkline (struct Client *client_p,struct Client *source_p,
                        int parc,char *parv[])
 {
-  FBFILE *in, *out;
-  int pairme=0,error_on_write = NO;
-  char buf[BUFSIZE], buff[BUFSIZE], temppath[BUFSIZE], *user, *host, *p;
-  const char  *filename;                /* filename to use for unkline */
-  mode_t oldumask;
+  char *user, *host;
 
-  ircsprintf(temppath, "%s.tmp", ConfigFileEntry.klinefile);
-  
   if (!IsOperUnkline(source_p))
     {
       sendto_one(source_p,":%s NOTICE %s :You need unkline = yes;",me.name,parv[0]);
       return;
     }
+
   if (parc < 2)
     {
       sendto_one(source_p, form_str(ERR_NEEDMOREPARAMS),
@@ -138,7 +136,21 @@
       return;
     }
 
-  if (remove_tkline_match(host, user))
+  /* possible remote kline.. */
+  if(parc > 3)
+  {
+    if(irccmp(parv[2], "ON") == 0)
+    {
+      sendto_server(NULL, source_p, NULL, CAP_UNKLN, NOCAPS, LL_ICLIENT,
+		    ":%s UNKLINE %s %s %s",
+		    source_p->name, parv[3], user, host);
+      
+      if(match(parv[3], me.name) == 0)
+        return;
+    }
+  }
+
+  if(remove_tkline_match(host, user))
     {
       sendto_one(source_p,
 		 ":%s NOTICE %s :Un-klined [%s@%s] from temporary k-lines",
@@ -151,10 +163,92 @@
       return;
     }
 
+  remove_permkline_match(source_p, host, user);
+}
+
+/* ms_unkline()
+ *
+ * input	- pointer to servere
+ * 		- pointer to client
+ * 		- parm count
+ * 		- params
+ * output	- none
+ * side effects - kline is removed if matching shared {} is found.
+ */
+static void ms_unkline(struct Client *client_p, struct Client *source_p,
+		     int parc, char *parv[])
+{
+  char *kuser;
+  char *khost;
+  
+  if(parc != 4)
+    return;
+
+  /* parv[0]  parv[1]        parv[2]  parv[3]
+   * oper     target server  user     host    */
+  sendto_server(client_p, source_p, NULL, CAP_UNKLN, NOCAPS, LL_ICLIENT,
+		":%s UNKLINE %s %s %s",
+		parv[0], parv[1], parv[2], parv[3]);
+
+  kuser = parv[2];
+  khost = parv[3];
+
+  if(!match(parv[1], me.name))
+    return;
+
+  if(!IsPerson(source_p))
+    return;
+
+  if(find_u_conf((char *)source_p->user->server, source_p->username,
+                 source_p->host, FLAGS2_OPER_UNKLINE))
+  {
+    sendto_realops_flags(FLAGS_ALL, L_ALL,
+	       "*** Received Un-kline for [%s@%s], from %s",
+	       kuser, khost, get_oper_name(source_p));
+
+    if(remove_tkline_match(khost, kuser))
+    {
+      sendto_one(source_p,
+	         ":%s NOTICE %s :Un-klined [%s@%s] from temporary k-lines",
+		 me.name, parv[0],kuser, khost);
+
+      sendto_realops_flags(FLAGS_ALL, L_ALL,
+	                   "%s has removed the temporary K-Line for: [%s@%s]",
+			   get_oper_name(source_p), kuser, khost);
+
+      ilog(L_NOTICE, "%s removed temporary K-Line for [%s@%s]",
+	   source_p->name, kuser, khost);
+      return;
+    }
+
+    remove_permkline_match(source_p, khost, kuser);    
+  }
+}
+
+/* remove_permkline_match()
+ *
+ * hunts for a permanent kline, and removes it.
+ */
+static void remove_permkline_match(struct Client *source_p,
+	                           char *host, char *user)
+{
+  FBFILE *in, *out;
+  int pairme = 0;
+  int error_on_write = NO;
+  char buf[BUFSIZE];
+  char buff[BUFSIZE];
+  char temppath[BUFSIZE];
+  const char *filename;
+  mode_t oldumask;
+  char *p;
+  
+  ircsprintf(temppath, "%s.tmp", ConfigFileEntry.klinefile);
+  
   filename = get_conf_name(KLINE_TYPE);
+
   if ((in = fbopen(filename, "r")) == 0)
     {
-      sendto_one(source_p, ":%s NOTICE %s :Cannot open %s", me.name, parv[0],
+      sendto_one(source_p, ":%s NOTICE %s :Cannot open %s", me.name, source_p->name,
 		 filename);
       return;
     }
@@ -162,8 +256,8 @@
   oldumask = umask(0);
   if ((out = fbopen(temppath, "w")) == 0)
     {
-      sendto_one(source_p, ":%s NOTICE %s :Cannot open %s", me.name, parv[0],
-		 temppath);
+      sendto_one(source_p, ":%s NOTICE %s :Cannot open %s",
+	         me.name, source_p->name, temppath);
       fbclose(in);
       umask(oldumask);
       return;
@@ -234,6 +328,11 @@
     {
       sendto_one(source_p, ":%s NOTICE %s :No K-Line for %s@%s",
                  me.name, source_p->name,user,host);
+
+      if(!MyClient(source_p))
+        sendto_realops_flags(FLAGS_ALL, L_ALL, 
+			"*** Remote Un-Kline for [%s@%s] is not K-Lined.",
+			user, host);
       return;
     }
 
@@ -248,6 +347,8 @@
   return; 
 }
 
+    
+  
 /*
  * flush_write()
  *
Index: src/ircd_parser.y
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/src/ircd_parser.y,v
retrieving revision 1.243
diff -u -r1.243 ircd_parser.y
--- src/ircd_parser.y	25 Apr 2002 17:53:21 -0000	1.243
+++ src/ircd_parser.y	26 Apr 2002 12:49:51 -0000
@@ -1293,6 +1293,8 @@
     yy_aconf->name = NULL;
     yy_aconf->user = NULL;
     yy_aconf->host = NULL;
+    /* default: allow remote kline, disallow remote unkline */
+    yy_aconf->port = FLAGS2_OPER_K;
   }
   '{' shared_items '}' ';'
   {
@@ -1303,7 +1305,8 @@
 shared_items:		shared_items shared_item |
 			shared_item;
 
-shared_item:		shared_name | shared_user | error;
+shared_item:		shared_name | shared_user | shared_kline |
+                        shared_unkline | error;
 
 shared_name:		NAME '=' QSTRING ';'
   {
@@ -1330,6 +1333,24 @@
       yy_aconf->host = new_host;
     }
   };
+
+shared_kline:	KLINE '=' TYES ';'
+  {
+    yy_aconf->port |= CONF_OPER_K;
+  }
+    | KLINE '=' TNO ';'
+  {
+    yy_aconf->port &= ~CONF_OPER_K;
+  } ;
+
+shared_unkline:	UNKLINE '=' TYES ';'
+  {
+    yy_aconf->port |= CONF_OPER_UNKLINE;
+  }
+    | UNKLINE '=' TNO ';'
+  {
+    yy_aconf->port &= ~CONF_OPER_UNKLINE;
+  } ;
 
 /***************************************************************************
  *  section connect
Index: src/s_conf.c
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/src/s_conf.c,v
retrieving revision 7.299
diff -u -r7.299 s_conf.c
--- src/s_conf.c	25 Apr 2002 17:53:22 -0000	7.299
+++ src/s_conf.c	26 Apr 2002 12:49:53 -0000
@@ -1238,11 +1238,12 @@
  * inputs       - pointer to servername
  *		- pointer to user of oper
  *		- pointer to host of oper
+ *		- flag to match (kline/unkline)
  * output       - NULL or pointer to found struct ConfItem
  * side effects - looks for a matches on all fields
  */
 int 
-find_u_conf(char *server,char *user,char *host)
+find_u_conf(char *server, char *user, char *host, int flag)
 {
   struct ConfItem *aconf;
 
@@ -1251,11 +1252,16 @@
       if (BadPtr(aconf->name))
           continue;
 
-      if(match(aconf->name,server))
+      if(match(aconf->name, server))
 	{
-	  if (BadPtr(aconf->user) || BadPtr(aconf->host))
+          /* allowing all (un)klines from a server */
+	  if((BadPtr(aconf->user) || BadPtr(aconf->host)) &&
+             aconf->port & flag)
 	    return YES;
-	  if(match(aconf->user,user) && match(aconf->host,host))
+
+	  /* allowing (un)klines from a specific u@h on server */
+	  if(match(aconf->user,user) && match(aconf->host,host) &&
+             aconf->port & flag)
 	    return YES;
 
 	}
Index: src/s_serv.c
===================================================================
RCS file: /cvsroot/ircd-hybrid-7/src/s_serv.c,v
retrieving revision 7.251
diff -u -r7.251 s_serv.c
--- src/s_serv.c	13 Mar 2002 13:53:07 -0000	7.251
+++ src/s_serv.c	26 Apr 2002 12:49:56 -0000
@@ -115,6 +115,7 @@
   { "ZIP",   CAP_ZIP },
   { "TBURST", CAP_TBURST },
   { "PARA",  CAP_PARA },
+  { "UNKLN", CAP_UNKLN },
   { 0,           0 }
 };
 
