/* doc/example.conf - ircd-ratbox Example configuration file
 *
 * Copyright (C) 2000-2002 Hybrid Development Team
 * Copyright (C) 2002-2003 ircd-ratbox development team
 *
 * Written by ejb, wcampbel, db, leeh and others
 *
 * $Id$
 */

/* IMPORTANT NOTES:
 *
 * class {} blocks MUST be specified before anything that uses them.  That
 * means they must be defined before auth {} and before connect {}.
 *
 * auth {} blocks MUST be specified in order of precedence.  The first one
 * that matches a user will be used.  So place spoofs first, then specials,
 * then general access, then restricted.
 *
 * Both shell style (#) and C style comments are supported.
 *
 * Files may be included by either:
 *        .include "filename"
 *        .include <filename>
 *
 * Times/durations are written as:
 *        12 hours 30 minutes 1 second
 *        
 * Valid units of time:
 *        month, week, day, hour, minute, second
 *
 * Valid units of size:
 *        megabyte/mbyte/mb, kilobyte/kbyte/kb, byte
 *
 * Sizes and times may be singular or plural.  
 */ 

/* EFNET NOTE:
 * 
 * This config file is NOT suitable for EFNet.  EFNet admins should use
 * example.efnet.conf
 */
 
 /* serverinfo {}:  Contains information about the server. (OLD M:) */
serverinfo {
	/* name: the name of our server */
	name = "hades.arpa";

	/* use ts6: whether we want to use the TS6 protocol to other servers
	 * or not.  Note you should avoid mixing TS6 with older TS versions
	 * as you can get ban desyncs.
	 */
	use_ts6 = yes;

	/* sid: the unique server id of our server.  This must be three
	 * characters long.  The first character must be a digit [0-9], the
	 * remaining two chars may be letters [A-Z] or digits [0-9].
	 *
	 * This must be specified even if use_ts6 is set to no.
	 */
	sid = "42X";

	/* description: the description of our server.  '[' and ']' may not
	 * be used here for compatibility with older servers.
	 */
	description = "ircd-ratbox test server";

	/* network info: the name and description of the network this server
	 * is on.  Shown in the 005 reply and used with serverhiding.
	 */
	network_name = "MyNet";
	network_desc = "This is My Network";

	/* hub: allow this server to act as a hub and have multiple servers
	 * connected to it.  
	 */
	hub = no;

	/* vhost: the IP to bind to when we connect outward to ipv4 servers.
	 * This should be an ipv4 IP only.
	 */
	#vhost = "192.169.0.1";

	/* vhost6: the IP to bind to when we connect outward to ipv6 servers.
	 * This should be an ipv6 IP only.
	 */
	#vhost6 = "3ffe:80e8:546::2";
};

/* admin {}: contains admin information about the server. (OLD A:) */
admin {
	name = "Smurf target";
	description = "Main Server Administrator";
	email = "<syn@packets.r.us>";
};

/* logging {}: contains information about logfiles. */
logging {
	/* logfiles: the logfiles to use for user connects, /oper uses,
	 * and failed /oper.  These files must exist for logging to be used.
	 */
	fname_userlog = "logs/userlog";
	fname_operlog = "logs/operlog";
	fname_foperlog = "logs/foperlog";
};

/* class {}: contain information about classes for users (OLD Y:) */
class "users" {
	/* You can either put the class name here or with the class itself
	/* name: the name of the class.  classes are text now */
	/* name = "users"; */

	/* ping time: how often a client must reply to a PING from the
	 * server before they are dropped.
	 */
	ping_time = 2 minutes;

        /* number per ident: the number of users per user@host networkwide
         * allowed to connect.  Unidented connections are classified as
         * the same ident.
         */
        number_per_ident = 2;

	/* number per ip: the number of local users per host allowed */
	number_per_ip = 3;

        /* number per ip global: the number of network wide connections
         * per host allowed for a user, including connections to the
         * local server.
         */
        number_per_ip_global = 5;

	/* cidr_bitlen:  Limits numbers of connections from a subnet size */
	 * the following example makes the subnet /64 this is useful
	 * for IPv6 connections in particular
	 * Also note that the way ircd-ratbox is written if you have
	 * compiled support for IPv6, IPv4 cidr bitlens need to be modified
	 * Basically to get the approriate length add 96 to the IPv4 length
	 * For example for a /24 do 96+24 = 120
	 *
	 */
	cidr_bitlen = 64;

	/* cidr_amount:  Number of connections to allow from a subnet of the 
	 * size given in cidr_bitlen.  4 seems to be a good default to me.
	 */
	cidr_amount = 4;

	/* max number: the maximum number of users allowed in this class */
	max_number = 100;

	/* sendq: the amount of data allowed in a clients queue before
	 * they are dropped.
	 */
	sendq = 100 kbytes;
};

class "restricted" {
	ping_time = 1 minute 30 seconds;
	number_per_ip = 1;
	max_number = 100;
	sendq = 60kb;
};

class "opers" {
	ping_time = 5 minutes;
	number_per_ip = 10;
	max_number = 100;
	sendq = 100kbytes;
};

class "server" {
	ping_time = 5 minutes;

	/* connectfreq: only used in server classes.  specifies the delay
	 * between autoconnecting to servers.
	 */
	connectfreq = 5 minutes;

	/* max number: the amount of servers to autoconnect to */
	max_number = 1;

	/* sendq: servers need a higher sendq as they send more data */
	sendq=2 megabytes;

	/* sendq eob: servers sendq after the end of burst. */
	sendq_eob = 500 kbytes;
};

/* listen {}: contain information about the ports ircd listens on (OLD P:) */
listen {
	/* port: the specific port to listen on.  if no host is specified
	 * before, it will listen on all available IPs.
	 *
	 * ports are seperated via a comma, a range may be specified using ".."
	 */
	
	/* port: listen on all available IPs, ports 5000 and 6665 to 6669 */
	port = 5000, 6665 .. 6669;

	/* host: set a specific IP/host the ports after the line will listen 
	 * on.  This may be ipv4 or ipv6.
	 */
	host = "1.2.3.4";
	port = 7000, 7001;

	host = "3ffe:1234:a:b:c::d";
        port = 7002;
};

/* auth {}: allow users to connect to the ircd (OLD I:) */
auth {
	/* user: the user@host allowed to connect.  multiple IPv4/IPv6 user 
	 * lines are permitted per auth block.
	 */
	user = "*@172.16.0.0/12";
	user = "*test@123D:B567:*";

        /* encrypted: specifies whether the password below is encrypted
         * or not.  MD5 is supported, default is not encrypted
         */
        #encrypted = yes;

	/* password: an optional password that is required to use this block. */
	password = "letmein";
	
	/* spoof: fake the users user@host to be be this.  You may either
	 * specify a host or a user@host to spoof to.  This is free-form,
	 * just do everyone a favour and dont abuse it. (OLD I: = flag)
	 */
        spoof = "I.still.hate.packets";

	/* Possible flags in auth:
	 * 
	 * spoof_notice               | give a notice when spoofing hosts
	 * exceed_limit (old > flag)  | allow user to exceed class user limits
	 * kline_exempt (old ^ flag)  | exempt this user from k/g/xlines
	 * gline_exempt (old _ flag)  | exempt this user from glines
	 * spambot_exempt	      | exempt this user from spambot checks
	 * shide_exempt		      | exempt this user from serverhiding
         * flood_exempt               | exempt this user from flood limits
         *                                     USE WITH CAUTION.
	 * no_tilde     (old - flag)  | don't prefix ~ to username if no ident
	 * need_ident   (old + flag)  | require ident for user in this class
	 * restricted                 | prevent user from sending mode changes
	 */
	flags = kline_exempt, exceed_limit;
	
	/* class: the class the user is placed in */
	class = "opers";
};

auth {
	/* redirect: the server and port to redirect a user to.  A user does
	 * not have to obey the redirection, the ircd just suggests to them
	 * an alternative server.
	 */
	redirserv = "irc.fi";
	redirport = 6667;
	
	user = "*.fi";

	/* class: a class is required even though it is not used */
	class = "users";
};

auth {
	user = "*@*";
	class = "users";
	
	flags = restricted, need_ident;
};

/* operator {}: defines ircd operators. (OLD O:)
 * ircd-ratbox no longer supports local operators, privileges are
 * controlled via flags.
 */
operator "god" {
	/* name: the name of the oper this can either go above or here */
	/* name = "god"; */

	/* user: the user@host required for this operator.  CIDR *is*
	 * supported now.
 	 * multiple user="" lines are supported.
	 */
	user = "*god@*";
	user = "*@127.0.0.1";

        /* encrypted: specifies whether the password below is encrypted
         * or not.  default is encrypted.
         */
        #encrypted = no;

	/* password: the password required to oper.  Unless encrypted=no;
         * this will need to be encrypted using mkpasswd, MD5 is
         * supported
	 */
	password = "etcnjl8juSU1E";

	/* rsa key: the public key for this oper when using Challenge.
	 * A password should not be defined when this is used, see 
	 * doc/challenge.txt for more information.
	 */
	#rsa_public_key_file = "/usr/local/ircd/etc/oper.pub";

	/* class: the class the oper joins when they successfully /oper */
	class = "opers";

	/* privileges: controls the activities and commands an oper is
	 * allowed to do on the server.  All options default to no.
	 * Available options:
	 *
	 * global_kill:  allows remote users to be /KILL'd (OLD 'O' flag)
	 * remote:       allows remote SQUIT and CONNECT   (OLD 'R' flag)
	 * kline:        allows KILL, KLINE and DLINE      (OLD 'K' flag)
	 * unkline:      allows UNKLINE and UNDLINE        (OLD 'U' flag)
	 * gline:        allows GLINE                      (OLD 'G' flag)
	 * nick_changes: allows oper to see nickchanges    (OLD 'N' flag)
	 *               via usermode +n
	 * rehash:       allows oper to REHASH config      (OLD 'H' flag)
	 * die:          allows DIE and RESTART            (OLD 'D' flag)
	 * admin:        gives admin privileges.  admins
	 *               may (un)load modules and see the
	 *               real IPs of servers.
	 * hidden_admin: gives admin privileges except
	 *		 will not have the admin lines in
	 *		 stats p and whois.
	 * xline:	 allows use of /quote xline/unxline
	 * operwall:     allows the oper to send operwalls
	 * oper_spy:	 allows 'operspy' features to see through +s
	 * 		 channels etc. see /quote help operspy
	 * oper_invisible: hides the oper from /stats p    (OLD UMODE +p)	
         */
	flags = global_kill, remote, kline, unkline, gline,
		die, rehash, admin, xline, operwall;
};

/* connect {}: controls servers we connect to (OLD C:, N:, H:, L:) */
connect "irc.uplink.com" {
	/* name: the name of the server */
	/* As with the others this can go above or here */
	/* name = "irc.uplink.com"; */

	/* host: the host or IP to connect to.  If a hostname is used it
	 * must match the reverse dns of the server.
	 */
	host = "192.168.0.1";

	/* vhost: the host or IP to bind to for this connection.  If this
	 * is not specified, the default vhost (in serverinfo {}) is used.
	 */
	#vhost = "192.168.0.50";

	/* passwords: the passwords we send (OLD C:) and accept (OLD N:).
	 * The remote server will have these passwords reversed.
	 */
	send_password = "password";
	accept_password = "anotherpassword";

	/* encrypted: controls whether the accept_password above has been
	 * encrypted.  (OLD CRYPT_LINK_PASSWORD now optional per connect)
	 */
	encrypted = no;

	/* port: the port to connect to this server on */
	port = 6666;

	/* hub mask: the mask of servers that this server may hub. Multiple
	 * entries are permitted
	 */
	hub_mask = "*";

	/* leaf mask: the mask of servers this server may not hub.  Multiple
	 * entries are permitted.  Useful for forbidding EU -> US -> EU routes.
	 */
	#leaf_mask = "*.uk";

	/* class: the class this server is in */
	class = "server";

	/* autoconnect: controls whether we autoconnect to this server or not,
	 * dependent on class limits.
	 */
	autoconn = yes;
	
	/* compressed: controls whether traffic is compressed via ziplinks.
	 * By default this is disabled
	 */
	#compressed = yes;

	/* topicburst: controls whether topics are burst over this link.
	 * by default this is disabled
	 */
	topicburst = yes;
};

connect "ipv6.some.server" {
        host = "3ffd:dead:beef::1";
        send_password = "password";
        accept_password = "password";
        port = 6666;

	/* aftype: controls whether the connection uses "ipv4" or "ipv6".
	 * Default is ipv4.
	 */
	aftype = ipv6;
        class = "server";
};

/* cluster {}; servers that have klines/unklines/locops shared automatically
 * (OLD hyb6 SLAVE_SERVERS)
 */
cluster {
	/* name: the server to share with, this can be a wildcard */
	/* NOTE: clustering is only done for actions by LOCAL opers, so the
	 * action will only be clustered to the servers that the originating
	 * server has set as such.
	 */
	name = "*.lan";

	/* type: list of what to share, options:
	 *    kline   - share klines
	 *    unkline - share unklines
	 *    locops  - share locops
	 *    xline   - share xlines
	 *    unxline - share unxlines
	 *    resv    - share resvs
	 *    unresv  - share unresvs
	 *    all     - share all of the above
	 */
	type = kline, unkline, locops;
};

/* shared {}: users that are allowed to remote kline (OLD U:) */
shared {
	/* name: the server the user must be on to set klines.  If this is not
	 * specified, the user will be allowed to kline from all servers.
	 */
	name = "irc2.some.server";

	/* user: the user@host mask that is allowed to set klines.  If this is
	 * not specified, all users on the server above will be allowed to set
	 * a remote kline.
	 */
	user = "oper@my.host.is.spoofed";

	/* type: list of what to share, options:
	 *    kline   - allow oper/server to kline (default)
	 *    unkline - allow oper/server to unkline
	 *    xline   - allow oper/server to xline/unxline
	 *    resv    - allow oper/server to resv/unresv
	 *    all     - allow oper/server to do all of above.
	 */
	type = kline, unkline;
};

/* kill {}: users that are not allowed to connect (OLD K:)
 * Oper issued klines will be added to the specified kline config
 */
kill {
	user = "bad@*.hacked.edu";
	reason = "Obviously hacked account";
};

/* deny {}: IPs that are not allowed to connect (before DNS/ident lookup)
 * Oper issued dlines will be added to the specified dline config
 */
deny {
	ip = "10.0.1.0/24";
	reason = "Reconnecting vhosted bots";
};

/* exempt {}: IPs that are exempt from deny {} and Dlines. (OLD d:) */
exempt {
	ip = "192.168.0.0/16";
};

/* resv {}: nicks and channels users may not use/join (OLD Q:) */
resv {
        /* reason: the reason for the proceeding resv's */
        reason = "There are no services on this network";

	/* resv: the nicks and channels users may not join/use */
	nick = "nickserv";
	nick = "chanserv";
	channel = "#services";

	/* resv: wildcard masks are also supported in nicks only */
	reason = "Clone bots";
	nick = "clone*";
};

/* gecos {}:  The X: replacement, used for banning users based on their
 * "realname".  The action may be either:
 *      warn:   allow client to connect, but send message to opers
 *      reject: drop clients but also send message to opers.
 *      silent: silently drop clients who match.
 */
gecos {
	name = "*sex*";
	reason = "Possible spambot";
	action = warn;
};

gecos {
	name = "sub7server";
	reason = "Trojan drone";
	action = reject;
};

gecos {
	name = "*http*";
	reason = "Spambot";
	action = silent;
};

/* The channel block contains options pertaining to channels */
channel {
	/* invex: Enable/disable channel mode +I, a n!u@h list of masks
	 * that can join a +i channel without an invite.
	 */
	use_invex = yes;

	/* except: Enable/disable channel mode +e, a n!u@h list of masks
	 * that can join a channel through a ban (+b).
	 */
	use_except = yes;

	/* knock: Allows users to request an invite to a channel that
	 * is locked somehow (+ikl).  If the channel is +p or you are banned
	 * the knock will not be sent.
	 */
	use_knock = yes;

	/* knock delay: The amount of time a user must wait between issuing
	 * the knock command.
	 */
	knock_delay = 5 minutes;

	/* knock channel delay: How often a knock to any specific channel
	 * is permitted, regardless of the user sending the knock.
	 */
	knock_delay_channel = 1 minute;

	/* max chans: The maximum number of channels a user can join/be on. */
	max_chans_per_user = 15;

        /* quiet on ban: stop banned people talking in channels. */
        quiet_on_ban = yes;

        /* max bans: maximum number of +b/e/I modes in a channel */
        max_bans = 25;

	/* persist time: the minimum amount of time a channel will remain with
	 * all its modes intact once the last user has left the channel.
	 *
	 * set to 0 to disable.
	 */
	persist_time = 30 minutes;

        /* splitcode: the ircd will check every 10s as to whether splitmode
	 * should be disabled or not, so there may be a delay between a
	 * netsplit ending and splitmode ending.
	 *
	 * both split users and split servers must be true to enter splitmode
	 * 
	 * you may force splitmode to be permanent by /quote set splitmode on
	 */

	/* split users: when the usercount is lower than this level, consider
	 * ourselves split.  this must be set for automatic splitmode
	 */
	default_split_user_count = 0;

	/* split servers: when the servercount is lower than this, consider
	 * ourselves split.  this must be set for automatic splitmode
	 */
	default_split_server_count = 0;

	/* split delay: the amount of time after the netsplit ends to come
	 * out of splitmode.  0 disables.
	 */
	default_split_delay = 15 seconds;

	/* split no create: disallow users creating channels on split, works in 
	 * tandem with persistant channels, that have retained their modes.
	 */
	no_create_on_split = no;

	/* split: no join: disallow users joining channels at all on a split */
	no_join_on_split = no;

        /* no oper resvs: allow opers to join/talk through channel jupes */
        no_oper_resvs = no;

	/* burst topicwho: when bursting topics, also burst the topic setter */
	burst_topicwho = yes;
};


/* The serverhide block contains the options regarding serverhiding */
serverhide {
	/* flatten links: this option will show all servers in /links appear
	 * that they are linked to this current server
	 */
	flatten_links = no;

	/* links delay: how often to update the links file when it is
	 * flattened.
	 */
	links_delay = 5 minutes;

	/* hidden: hide this server from a /links output on servers that
	 * support it.  this allows hub servers to be hidden etc.
	 */
        hidden = no;

	/* disable hidden: prevent servers hiding themselves from a
	 * /links ouput.
	 */
	disable_hidden = no;
};

/* The general block contains many of the options that were once compiled
 * in options in config.h.  The general block is read at start time.
 */
general {
	/* default operstring: defines the default oper response
	 * in /whois queries, eg "is an IRC Operator"
	 */
	default_operstring = "is an IRC Operator";

	/* default adminstring: defines the default admin response
	 * in /whois queries, eg "is a Server Administrator"
	 */
	default_adminstring = "is a Server Administrator";

        /* tkline_expire_notices: give a notice to opers when a tkline
         * expires
         */
        tkline_expire_notices = no;

	/* floodcount: the default value of floodcount that is configurable
	 * via /quote set floodcount.  This is the amount of lines a user
	 * may send to any other user/channel in one second.
	 */
        default_floodcount = 10;

	/* failed oper notice: send a notice to all opers on the server when 
	 * someone tries to OPER and uses the wrong password, host or ident.
	 */
	failed_oper_notice = yes;

	/* dots in ident: the amount of '.' characters permitted in an ident
	 * reply before the user is rejected.
	 */
	dots_in_ident=2;

	/* dot in ipv6: ircd-hybrid-6.0 and earlier will disallow hosts 
	 * without a '.' in them.  this will add one to the end.  only needed
	 * for older servers.
	 */
        dot_in_ip6_addr = no;
        
        /* min nonwildcard: the minimum non wildcard characters in k/d/g lines
	 * placed via the server.  klines hand placed are exempt from limits.
	 * wildcard chars: '.' '*' '?' '@'
	 */
	min_nonwildcard = 4;

	/* min nonwildcard simple: the minimum non wildcard characters in
	 * xlines/resvs placed via the server.
	 * wildcard chars: '*' '?'
	 */
	min_nonwildcard_simple = 3;

        /* max accept: maximum allowed /accept's for +g usermode */
        max_accept = 20;

	/* nick flood: enable the nickflood control code */
	anti_nick_flood = yes;

	/* nick flood: the nick changes allowed in the specified period */
	max_nick_time = 20 seconds;
	max_nick_changes = 5;

        /* anti spam time: the minimum time a user must be connected before
	 * custom quit messages are allowed.
	 */
        anti_spam_exit_message_time = 5 minutes;

	/* ts delta: the time delta allowed between server clocks before
	 * a warning is given, or before the link is dropped.  all servers
	 * should run ntpdate/rdate to keep clocks in sync
	 */
	ts_warn_delta = 30 seconds;
	ts_max_delta = 5 minutes;

	/* client exit: prepend a users quit message with "Client exit: " */
	client_exit = yes;

	/* kline delay: delay the checking of klines until a specified time.
	 * Useful if large kline lists are applied often to prevent the
	 * server eating CPU.
	 */
	kline_delay = 0 seconds;

	/* kline reason: show the user the reason why they are k/d/glined 
	 * on exit.  may give away who set k/dline when set via tcm.
	 */
	kline_with_reason = yes;

	/* kline connection closed: make the users quit message on channels
	 * to be "Connection closed", instead of the kline reason.
	 */
	kline_with_connection_closed = no;

	/* non redundant klines: flag and ignore redundant klines */
	non_redundant_klines = yes;

	/* warn no nline: warn opers about servers that try to connect but
	 * we dont have a connect {} block for.  Twits with misconfigured 
	 * servers can get really annoying with this enabled.
	 */
	warn_no_nline = yes;

	/* stats c oper only: make stats c (connect {}) oper only */
	stats_c_oper_only=no;

	/* stats h oper only: make stats h (hub_mask/leaf_mask) oper only */
	stats_h_oper_only=no;

	/* stats y oper only: make stats y (class {}) oper only */
	stats_y_oper_only=no;

	/* stats o oper only: make stats o (opers) oper only */
	stats_o_oper_only=yes;

	/* stats P oper only: make stats P (ports) oper only
	 * NOTE: users doing stats P will never be given the ips that the 
	 * server listens on, simply the ports.
	 */
	stats_P_oper_only=no;

	/* stats i oper only: make stats i (auth {}) oper only. set to:
	 *     yes:    show users no auth blocks, made oper only.
	 *     masked: show users first matching auth block
	 *     no:     show users all auth blocks.
	 */
	stats_i_oper_only=masked;

	/* stats k/K oper only: make stats k/K (klines) oper only.  set to:
	 *     yes:    show users no auth blocks, made oper only
	 *     masked: show users first matching auth block
	 *     no:     show users all auth blocks.
	 */
	stats_k_oper_only=masked;

        /* map oper only: make /map oper only */
        map_oper_only = no;

	/* operspy admin only: make operspy notices to +Z admin only */
	operspy_admin_only = no;

	/* caller id wait: time between notifying a +g user that somebody
	 * is messaging them.
	 */
	caller_id_wait = 1 minute;

	/* pace wait simple: time between use of less intensive commands
	 * (HELP, remote WHOIS, WHOWAS)
	 */
	pace_wait_simple = 1 second;

	/* pace wait: time between more intensive commands
	 * (ADMIN, INFO, LIST, LUSERS, MOTD, STATS, VERSION)
	 */
	pace_wait = 10 seconds;

	/* short motd: send clients a notice telling them to read the motd
	 * instead of forcing a motd to clients who may simply ignore it.
	 */
	short_motd = no;

	/* ping cookies: require clients to respond exactly to a ping command,
	 * can help block certain types of drones and FTP PASV mode spoofing.
	 */
	ping_cookie = no;

	/* connect timeout: sets how long we should wait for a connection
	 * request to succeed
	 */
	connect_timeout = 30 seconds;

	/* disable auth: disables identd checking
	disable_auth = no;

	/* no oper flood: increase flood limits for opers. */
	no_oper_flood = yes;

	/* glines: enable glines, network wide temp klines */
	glines = yes;

	/* gline time: the amount of time a gline will remain before exiring */
	gline_time = 1 day;

	/* idletime: the maximum amount of time a user may idle before
	 * they are disconnected
	 */
        idletime = 0;

	/* REMOVE ME.  The following line checks you've been reading. */
	havent_read_conf = 1;
	
	/* max targets: the maximum amount of targets in a single 
	 * PRIVMSG/NOTICE.  set to 999 NOT 0 for unlimited.
	 */
	max_targets = 4;

	/* client flood: maximum number of lines in a clients queue before
	 * they are dropped for flooding.
	 */
	client_flood = 20;

        /* use_whois_actually: send clients requesting a whois a numeric
         * giving the real IP of non-spoofed clients to prevent DNS abuse.
         */
        use_whois_actually = yes;

	/* usermodes configurable: a list of usermodes for the options below
	 *
	 * +b - bots       - See bot and drone flooding notices
	 * +c - cconn      - Client connection/quit notices
	 * +d - debug      - See debugging notices
	 * +f - full       - See I: line full notices
	 * +g - callerid   - Server Side Ignore
	 * +i - invisible  - Not shown in NAMES or WHO unless you share a 
	 *                   a channel
	 * +k - skill      - See server generated KILL messages
	 * +l - locops     - See LOCOPS messages
	 * +n - nchange    - See client nick changes
	 * +r - rej        - See rejected client notices
	 * +s - servnotice - See general server notices
	 * +u - unauth     - See unauthorised client notices
	 * +w - wallop     - See server generated WALLOPS
	 * +x - external   - See remote server connection and split notices
	 * +y - spy        - See LINKS, STATS, TRACE notices etc.
	 * +z - operwall   - See oper generated WALLOPS
	 * +Z - operspy	   - See operspy notices
	 */
	 
	/* oper only umodes: usermodes only opers may set */
	oper_only_umodes = bots, cconn, debug, full, skill, nchange, 
                     rej, spy, external, operwall, locops, unauth;

	/* oper umodes: default usermodes opers get when they /oper */
	oper_umodes = locops, servnotice, operwall, wallop;

	/* servlink path: path to 'servlink' program used by ircd to handle
	 * encrypted/compressed server <-> server links.
	 *
	 * only define if servlink is not in same directory as ircd itself.
	 */
	#servlink_path = "/usr/local/ircd/bin/servlink";

	/* use egd: if your system does not have *random devices yet you
	 * want to use OpenSSL and encrypted links, enable this.  Beware -
	 * EGD is *very* CPU intensive when gathering data for its pool
	 */
	#use_egd = yes;

	/* egdpool path: path to EGD pool. Not necessary for OpenSSL >= 0.9.7
	 * which automatically finds the path.
	 */
	#egdpool_path = "/var/run/egd-pool";


	/* compression level: level of compression for compressed links between
	 * servers.  
	 *
	 * values are between: 1 (least compression, fastest)
	 *                and: 9 (most compression, slowest).
	 */
	#compression_level = 6;

	/* fallback_to_ip6_int: This enables falling back to using the
	 * ip6.int domain for reverse IPv6 lookups if the lookup for
	 * ip6.arpa failed.  This is obviously a feature that should be
	 * removed upon the completion of the migration to ip6.arpa
	 */
	fallback_to_ip6_int = yes;

        /* burst_away: This enables bursting away messages to servers.
         * With this disabled, we will only propogate AWAY messages
         * as users send them, but never burst them.  Be warned though
         * enabling this could increase the size of a burst significantly
         * for a large network, like EFnet.
         */
        burst_away = yes;

	/* htm_messages: This enables high transfer mode messages.
         * While htm mode doesn't actually change the behavior of anything
         * it gives opers a nice warning when things are getting crazy
         */
        htm_messages = yes;

	/* htm_interval: How often to do the high transfer mode check. */
        htm_interval = 5 seconds;

        /* htm_trigger: How many kB/s will trigger high transfer mode */
        htm_trigger = 40;
	
	/* reject_ban_time: How long to ban rejected clients */
	reject_ban_time = 5 minutes;
};

modules {
	/* module path: paths to search for modules specified below and 
	 * in /modload.
	 */
	path = "/usr/local/ircd/modules";
	path = "/usr/local/ircd/modules/autoload";

	/* module: the name of a module to load on startup/rehash */
	#module = "some_module.so";
};
