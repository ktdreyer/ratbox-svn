# Hybrid 7 Example configuration file
# $Id$
# December 2000 - ejb, wcampbel, db and others

# All comments start with the # sign.

# Nothing in this file is case sensitive now.

# serverinfo replaces the old M: line
serverinfo {
	name="hades.arpa";
	description="hybrid-7 test server";

	# The network_name and network_desc variables override
	# the compiled in defaults.  These are used for server 
	# hiding.
	network_name="EFnet";
	network_desc="Eris Free Network";

	# HUB is no longer a compiled in option.  It is set at 
	# runtime in this block and changeable with a REHASH
	hub=yes;

	# vhost defines what IP to bind to for *OUTGOING* connections.
	# This replaces the old M: line IP, and is only needed for 
	# multi-homed or virtual hosted machines not using the default
	# IP.  Note that you *MUST* use the IP, not a hostname, and it
	# cannot be in quotes
	# vhost=192.169.0.1;

	# Define the maximum number of clients that can connect to the 
	# server.
	max_clients = 1024;

	# Disable the ability to hack ops on splits
	no_hack_ops = yes;
};

# admin (or administrator) replaces the old A: line
# A:description:name:email
admin {
	name="Smurf target";
	email="<syn@packets.r.us>";
	description="Main Server Administrator";
};

# The logging block defines runtime logging options.
# There is no correspondence to the old conf.
logging {
	# These three paths are not *CURRENTLY* used.  They are still
	# compiled into the ircd with config.h
	logpath="/var/log/ircd/";
	oper_log="oper.log";
	gline_log="gline.log";
	# This option is used, however.
	# The following settings are valid (This can also be changed
	# by /quote SET LOG in the ircd)
	# L_CRIT, L_ERROR, L_WARN, L_NOTICE, L_TRACE, L_INFO, L_DEBUG
	log_level=L_INFO;
};

# Class blocks must be defined before using them in auth, operator, or
# connect blocks.
# Old Y: lines
class {
	# *FINALLY* we get rid of class numbers.
	name="users";
	ping_time=120;
	# We still have clone control.  Only specify number_per_ip for
	# user classes.
	number_per_ip=2;
	max_number=100;
	sendq=100000;
};

class {
	# A VERY limited restrictive class
	name="restricted";
	ping_time=90;
	number_per_ip=2;
	max_number=100;
	sendq=60000;
};

class {
	name="opers";
	ping_time=300;
	number_per_ip=10;
	max_number=100;
	sendq=100000;
};

class {
	name="server";
	ping_time=300;
	# Only specify the connection frequency for server classes.
	connectfreq=300;
	# maximum number of server to try to AUTO connect to.
	max_number=1;
	sendq=8000000;
};

# Old P: lines, listen on a port
# Note that you must listen on a port.  A serverinfo block or an M line
# will not create a port to listen on.
listen {
	# Unlike most other ip conf lines, this one must be in quotes.
	# it will accept hostnames as well.
	# ip="192.168.0.1";
	port=6667;
};

# auth blocks replace I: lines.  The old I: line flags are still preserved
# as options.
auth {
	# Specify the user@host in this option (I:ip:pass:USER@HOST:...)
	user="*@*";
	# Classes are names
	class="users";
	# We can force the user to have ident here (I: + flag)
	have_ident=yes;
};

auth {
	# This block is for distant clients, restrict their actions so that
	# they can become chanops but cannot chanop someone else.
	user="*@*.au";
	class="restricted";
	# Restrict them, but still require ident...we don't want a bunch
	# of clones and drones
	restricted=yes;
	have_ident=yes;
};

auth {
	user="db@koruna.varner.com";
	# Freeform spoofs are allowed.  Just do all of us a favor and
	# don't abuse this ability.
        spoof="I.still.hate.packets";
        # Enable/disable spoofing notification to admins (default=yes)
        spoof_notice=yes;
	# This is the old F: line (I: > flag)
	exceed_limit=yes;
	# This is the old E: line (I: ^ flag)
	kline_exempt=yes;
	# Make users matching this auth block exempt from G-lines
	gline_exempt=yes;
	class="opers";
};

auth {
	# ip is also valid, use it in place of the user line.
	# Note that this is in CIDR, and you cannot enclose it in quotes.
	ip=172.16.0.0/12;
	# Require a password for access
	password="gimmeaccess";
	# If the user does not have ident, act like they do and do not
	# sent the ~ in front of their username out to the network. 
	# I: line - flag
	no_tilde=yes;
	class="users";
};

# Auth blocks now allow a user to redirect the user to another server
# (possibly one that is closer) (This is very similar to IRCnet B: lines)
# NOTE:  You MUST put a class in even if it's not intended to ever be used
auth {
	user="*.fi";
	redirserv="efnet.cs.hut.fi";
	redirport=6667;
	class="users";
};

# Define operators, old O: lines.
# oper { } is also accepted.
# Note that local opers are no longer part of Hybrid.  Oper privileges are
# controlled by the flags now.
operator {
	# The nick of the oper
	name="god";
	# user@host, note that CIDR in O: lines is not *CURRENTLY* 
	# supported (an important note for Hybrid 6 users)
	user="*god@*";
	# The encrypted password used in the OPER command
	# Note:  if you #undef CRYPT_OPER_PASSWORD in config.h, you must
	#        use the plain text password here.  MD5 passwords are 
	#        supported and available on some platforms (FreeBSD 4.x
	#        and Linux glibc are known to work)
	# password="$1$tPH$nN7t5Jj14wYCoDZXc4fe91";
	# password="etcnjl8juSU1E"
	password="test";
	class="opers";
	# Allow the oper to global KILL (old O flag)
	global_kill=yes;
	# Allow the oper to remote SQUIT and CONNECT (old R flag)
	remote=yes;
	# Allow the oper to issue KLINE and DLINE (old K flag)
	kline=yes;
	# Allow the oper to issue UNKLINE and UNDLINE (old U flag)
	unkline=yes;
	# Allow the oper to issue GLINE (old G flag)
	gline=yes;
	# Allow the oper to issue DIE and RESTART (old D flag)
	die=yes;
	# Allow the oper to issue REHASH (old H flag)
	rehash=yes;
	# Allow the oper to see nick changes (old N flag)
	nick_changes=yes;
	# Set the oper +a when they oper up.  Marks them as an 
	# admin.  Admins can load and unload modules, as well as
	# see the real IPs in STATS c
	admin=yes;
};

# Connect blocks replace and VASTLY simplify C/N/H/L lines
connect {
	name = "irc.uplink.com";
	# Hostnames and IP's are both accepted
	host = "192.168.0.1";
	# send_password is the C line password, accept_password is the
	# N line password, they are not required to match.  The remote
	# server will have the two passwords reversed.
	send_password = "password";
	accept_password = "password";
	# What port should we autoconnect on (if autoconn is set to yes)
	port = 6666;
	# hub_mask replaces H: lines, multiple ones are accepted in each
	# connect block.
	hub_mask = "*";
	class = "server";
	# Set your server to autoconnect
	autoconn = YES;
};

connect {
	name = "irc2.some.server";
	host = "some.host.name.com";
	send_password = "password";
	# The old CRYPT_LINK_PASSWORD is now defined per connect {} block
	encrypted = yes;
	accept_password = "v/FfoSzTu1u3A";
	port = 6666;
	# Force this server to be a leaf
	leaf_mask = "*";
	# Force this server to be a LazyLink server.  Read 
	# doc/LazyLinks.as.implemented.txt for more information
	lazylink=yes;
	class = "server";
};

connect {
        name = "ipv6.some.server";
        host = "3ffd:dead:beef::1";
        send_password = "password";
        encrypted = yes;
        accept_password = "v/FfoSzTu1u3A";
        port = 6666;
        # Force this server to be a leaf
        leaf_mask = "*";
	# Force this server to connect via IPv6
	# use aftype = ipv4 for IPv4 specifc connects
	aftype = ipv6
        class = "server";
};

# The server listed in each shared block will be permitted to send their
# K-lines to you.  Note that this is very similar to the old U: lines.
# Now you can optionally specify what user@host's are allowed to send 
# K-lines as well
shared {
	name="irc2.some.server";
	user="username";
	host="hostname";
};

# Replacement for K: lines, bans based on user@host
kill {
	user="bad@*.hacked.edu";
	reason="Obviously hacked account";
};

# Replacement for D: lines, deny IP's and IP blocks.  CIDR notation is
# recommended
deny {
	ip=10.0.1.0/24;
	reason="Reconnecting vhosted bots";
};

# Replacement for Q: lines, preventing nicks from being used
quarantine {
	name="NickServ";
	reason="There are no Nickname Services on EFnet";
};

# Replacement for X: lines, denying users based on their "realname"
# field, useful for blocking known trojan drones, troublesome clients,
# and floodnets.  We now have a silent deny (2 in the last X: line field
# in the old conf)
gecos {
	name="*BitchX.doc*";
	reason="Misconfigured lame client";
	action=warn;
};

gecos {
	name="sub7server";
	reason="Trojan drone";
	action=reject;
};

gecos {
	name="*http*";
	reason="Spambot";
	action=silent;
};
# The general block contains many of the options that were once compiled
# in options in config.h.  The general block is read at start time.
general {
	# Send a notice to all opers on the server when someone tries
	# to OPER and uses the wrong password
	failed_oper_notice=yes;
	# If failed_oper_notice is set to "yes", also notify when someone
	# fails to OPER because of an identity mismatch (wrong host or nick)
	show_failed_oper_id=yes;

	# Define how many 'dot' characters are permitted in an ident reply
	# before rejecting the user.
	dots_in_ident=2;

	# Enable the nick flood control code.
	anti_nick_flood=yes;
	# These settings will allow 5 nick changes in 20 seconds.
	max_nick_time=20;
	max_nick_changes=5;

	# Define the time delta permissible for a remote server connection.
	# If our timestamp and the remote server's timestamp are over
	# ts_max_delta different, the connection will be dropped.  If it
	# is less than ts_max_delta but more than ts_warn_delta, send 
	# a notice to opers on the server, but still allow the connection.
	# Overrides the compiled in defaults
	ts_warn_delta=30;
	ts_max_delta=300;

	# When a user QUIT's, prepend their QUIT message with "Client exit:"
	# in order to help prevent against faking server error messages (ie.
	# ping timeout, connection reset by peer)
	client_exit=yes;

	# Show the reason why the user was K-lined or D-lined to the "victim"
	# It's a neat feature except for one thing... If you use a tcm
	# and it shows the nick of the oper doing the kline (as it does by 
	# default) Your opers can be hit with retaliation... Or if your 
	# opers use scripts that stick an ID into the comment field. etc.
	# It's up to you whether you want to use it or not.
	kline_with_reason=yes;
	# Force the signoff reason to be "Connection closed" when a user is
	# K-lined.  The user will still see the real reason.  This prevents 
	# other users seeing the client disconnect from harassing the IRCops.
	kline_with_connection_closed=no;
	# Set to "yes" if you wish your server to flag and not apply redundant
	# K-lines.
	non_redundant_klines=yes;

	# Enable this if you want opers to get noticed about "things" trying
	# to connect as servers that don't have N: lines.  Twits with 
	# misconfigured servers can get really annoying with this enabled.
	warn_no_nline=yes;

	# Set STATS o to be oper only
	o_lines_oper_only=yes;

	# Links Delay determines the time between updates of the user LINKS
	# file.  The default updates it every 5 minutes
	links_delay=300;

	# minimum seconds between uses of MOTD, INFO, HELP, LINKS, TRACE
	pace_wait=10;

	# The minimum number of seconds between uses of remote WHOIS before
	# the counter is reset.
	whois_wait=1;

	# Define the amount of time between KNOCK's.  Once every 5 minutes
	# should be enough.
	knock_delay=300;

        # Amount of time between notifying users in +g mode that someone
        # is messaging them.
        caller_id_wait=60;

	# There are clients ignoring the FORCE_MOTD numeric.  There is no 
	# no point forcing MOTD on connecting clients IMO.  Give them a short
	# NOTICE telling them they should read the MOTD, and leave it at that.
	short_motd=no;

	# Set to "yes" to disable flood control for opers.
	no_oper_flood=yes;

        #stop banned people from being able to talk in channels.
        quiet_on_ban=no;

	# Enable G-lines
	glines=yes;
	# Set the time for how long G-lines will last.  This example is
	# the old setting of 12 * 3600.  Note that the new conf file
	# cannot *CURRENTLY* perform the calculations for you.
	gline_time=43200;

	# Define the maximum amount of time a user can idle before 
	# disconnecting them.  Set to 0 to disable
        idletime=0;

	# Enable the server hiding feature.  This prevents users from 
	# finding out what server users are on, and hides IP's.  Note
	# that some clients do not handle this well and may break.  Blame
	# the packet kiddies for making this option almost a necessity.
	hide_server=no;

        # This is useful for leaf nodes and gateways. It keeps you from
        # connecting to too many places. It works by keeping you from
        # connecting to more than "n" nodes which you have C:blah::blah:6667
        # lines for.
  
        # Note that any number of nodes can still connect to you. This only
        # limits the number that you actively reach out to connect to.

        # Leaf nodes are nodes which are on the edge of the tree. If you want
        # to have a backup link, then sometimes you end up connected to both
        # your primary and backup, routing traffic between them. To prevent
        # this, #define MAXIMUM_LINKS 1 and set up both primary and
        # secondary with C:blah::blah:6667 lines. THEY SHOULD NOT TRY TO
        # CONNECT TO YOU, YOU SHOULD CONNECT TO THEM.

        # Gateways such as the server which connects Australia to the US can
        # do a similar thing. Put the American nodes you want to connect to
        # in with C:blah::blah:6667 lines, and the Australian nodes with
        # C:blah::blah lines. Have the Americans put you in with C:blah::blah
        # lines. Then you will only connect to one of the Americans.

        # This value is only used if you don't have server classes defined, and
        # a server is in class 0 (the default class if none is set).

	maximum_links=1;


	# Define these to the log files you want to use for user connections
        # (userlog), successful use of /oper (operlog), and failed use of
        # /oper (foperlog).  Logging will stop if either these files do not
        # exist, or if they are not defined.

	fname_userlog = "logs/userlog";
	fname_operlog = "logs/operlog";
	fname_foperlog = "logs/foperlog";

	# max_targets
	# only max_target targets can be PRIVMSG'ed / NOTICE'd in a single
	# command. default is 4 if not defined here. setting to 0 will have
	# broken results (ie PRIVMSG/NOTICE won't work).
	
	max_targets = 4;

	# message_locale
	# default message locale to use if gettext() is enabled
	# Use "custom" for the (in)famous Hybrid custom messages.
	# Use "standard" for the compiled in defaults.
	message_locale = "custom";

	# umodes that only opers can set.
	# the default should be fine, but you can add wallops and
	# servnotice if you want only opers to set +s / +w.
	# you can set others (invisible, callerid), but it's not
	# recommended.

	# Complete list:
	# +a - NONE       - Admin status.  OPER controls this
	# +b - bots       - See bot and drone flooding notices
	# +c - cconn      - Client connection/quit notices
	# +d - debug      - See debugging notices
	# +e - drone      - See possible drones
	# +f - full       - See I: line full notices
	# +g - callerid   - Server Side Ignore
	# +i - invisible  - Not shown in NAMES or WHO unless you share a 
	#                   a channel
	# +k - skill      - See server generated KILL messages
        # +l - locops     - See LOCOPS messages
	# +n - nchange    - See client nick changes
	# +o - NONE       - Operator status.  OPER controls this
	# +r - rej        - See rejected client notices
	# +s - servnotice - See general server notices
	# +u - unauth     - See unauthorized client notices
	# +w - wallop     - See server generated WALLOPS
	# +x - external   - See remote server connection and split notices
	# +y - spy        - See LINKS, STATS (if configured), TRACE notices
	# +z - operwall   - See oper generated WALLOPS

	oper_only_umodes = bots, cconn, debug, full, skill, nchange, 
                           rej, spy, external, operwall;

	# vchans_oper_only
        # allow non-opers to use CJOIN?
	vchans_oper_only = yes;
};

modules {
	# things relating to modules
	#
	# load a module upon startup (or rehash)
	module = "some_module.so";

	# set paths for module.  these paths are searched both for
	# module="" and /quote modload, when a relative pathname
	# is specified.
	path="/usr/local/ircd/modules/local";
	path="/usr/local/ircd/modules/autoload";
};
