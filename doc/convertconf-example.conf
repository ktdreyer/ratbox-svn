# $Id$
# The logging block defines runtime logging options.
# There is no correspondence to the old conf.
logging {
	/* These three paths are not *CURRENTLY* used.  They are still
	 * compiled into the ircd with config.h
	 */
	logpath = "/var/log/ircd/";
	oper_log = "oper.log";
	gline_log = "gline.log";

	/* This option is used, however.
	 * The following settings are valid (This can also be changed
	 * by /quote SET LOG in the ircd)
	 * L_CRIT, L_ERROR, L_WARN, L_NOTICE, L_TRACE, L_INFO, L_DEBUG
	 */
	log_level = L_INFO;
};

/* The server listed in each shared block will be permitted to send their
 * K-lines to you.  Note that this is very similar to the old U: lines.
 * Now you can optionally specify what user@host's are allowed to send 
 * K-lines as well.
 */
shared {
	name = "irc2.some.server";
	user = "username@hostname";
};

/* Replacement for K: lines, bans based on user@host */
kill {
	user = "bad@*.hacked.edu";
	reason = "Obviously hacked account";
};

/* Replacement for D: lines, deny IP's and IP blocks.  CIDR notation is
 * recommended.
 */
deny {
	ip = "10.0.1.0/24";
	reason = "Reconnecting vhosted bots";
};

/* Replacement for d: lines, provides protection from D-Lines. */
exempt {
	ip = "192.168.0.0/16";
};

/* Replacement for Q: lines, preventing nicks and channels being used 
 * The reasons for the resv are decided by the reason=""; line
 * preceding the resv
 */
resv {
        /* set the reason for the resv first */
        reason = "There are no services on this network";

	/* then we add the lines to block the nicks nickserv/chanserv,
	 * and the channel #services
	 */
	nick = "nickserv";
	nick = "chanserv";
	channel = "#services";

        /* wildcard masks in nicks are also supported, this would
	 * block anyone using a nick that starts with "clone"
	 */
	reason = "Clone bots";
	nick = "clone*";
};

/* Replacement for X: lines, denying users based on their "realname"
 * field, useful for blocking known trojan drones, troublesome clients,
 * and floodnets.  We now have a silent deny (2 in the last X: line field
 * in the old conf).
 */
gecos {
	name = "*sex*";
	reason = "Possible spambot";
	action = warn;
};

gecos {
	name = "sub7server";
	reason = "Trojan drone";
	action = reject;
};

gecos {
	name = "*http*";
	reason = "Spambot";
	action = silent;
};

/* The channel block contains options pertaining to channels
 * The defaults shown here, are the ones approved for EFNet usage
 * as of October 11 2001
 */
channel {
	/* allow the use of +I as a channel mode. This mode (from
	 * ircnet) allows the setting of a nick!user@host mask
	 * that will be allowed to always join a +i channel.
	 */
	use_invex = yes;

        /*
         * Enable/disable support for chanmode "+h <nick>" (halfops).
         */
        use_halfops = yes;

	/* allow the use of +e as a channel mode. This mode (from
	 * just about every other net,including ircnet) allows the
	 * setting of a nick!user@host mask that will be exempt from
	 * channel bans. This would allow you to set +b *!*@*.aol.com
	 * but +e *!friend@*aol.com would allow them to join through the ban.
	 */
	use_except = yes;

	/* allow the use of +a as a channel mode.  This mode allows users
	 * set 'anonymous ops'.  The only people able to see who is opped
	 * in a channel will be the people who are opped themselves.  This
	 * code has the consequence of having to 'sync' users with modes
	 * to update their clients channel list, which can cause a flood.
	 *
	 * There are still some minor issues with +a, it works generally
	 * but there are some situations where the resyncing will not be
	 * done properly.  We dont advise this is used on large networks
	 * because of the resyncing.
	 */
	use_anonops = no;

	/* This allows you to /quote knock #channel, when you are unsure
	 * who is in the channel. If the channel is +p or you are banned
	 * the knock will not be sent.
	 */
	use_knock = yes;

        /* use_vchans
         * disable the creation of vchans by remote servers.. we do not
         * currently recommend this feature, as it removes a lot of
         * functionality, however it's here for those who don't want
         * vchan support at all.
         */
        use_vchans = yes;

	/* vchans_oper_only
         * allow non-opers to use CJOIN?
	 *
	 * As vchans map into regular channels, and only opers can 
 	 * use cjoin when this is set, this is still EFNet compatible 100%
	 */
	vchans_oper_only = yes;

	/* knock_delay
	 * how long a user must wait between knocks
	 * default to one knock per user, per 5 minutes
	 */
	knock_delay = 5 minutes;

	/* knock_delay_channel
	 * how long a user must wait between knocks to a specific channel
	 * this is a global limit, so everytime we receive a knock for a
	 * channel we reset that channels last knock.
	 *
	 * default to one knock per channel, per minute
	 */
	knock_delay_channel = 1 minute;

	/* The maximum number of channels a user can join/be on. */
	/* The default is 15. */
	max_chans_per_user = 15;

        /* stop banned people from being able to talk in channels. */
        quiet_on_ban = yes;

        /* maximum number of +b/e/I modes in a channel */
        max_bans = 25;

	/* length of time a channel will remain once its last user has quit
	 * from the channel (via a netsplit or otherwise).  the channel will
	 * remain with all its modes, for no less than this length of time
	 */
	persist_time = 30 minutes;

        /* NOTE: the splitcode works on a timer.  once we enter auto splitmode,
	 * we check every 60s to see if we should leave it, therefore its
	 * possible that there may be a delay between being able to leave
	 * splitmode, and actually doing so
	 *
	 * default_split_user_count and default_split_server_count BOTH need
         * to be greater than zero, as well as one of the split options to
         * enter auto splitmode
	 *
	 * you may force splitmode to be permanent by /quote set splitmode on
	 */

	/* the minimum number of users we have before we consider ourselves
	 * split from the network
	 */
	default_split_user_count = 0;

	/* the minimum number of servers we have before we consider
	 * ourselves split from the network
	 */
	default_split_server_count = 0;

	/* disallow users creating channels on split, works in tandem with
	 * persisting channels, they can join channels that are persisting
	 * and have kept their modes, which will retain +ki etc
	 */
	no_create_on_split = no;

	/* disallow users joining channels at all on a split
	 */
	no_join_on_split = no;
};


/* The serverhide block contains the options regarding serverhiding */
serverhide {
	/* How often to update the links file that users see when the list
	 * is flattened after a netsplit or a netjoin has occured.  Once a
	 * netsplit/netjoin occurs, the ircd will wait for this delay then
	 * update the links file.
	 */
	links_delay = 5 minutes;

	/* Flatten the links list, so it looks like all servers are
	 * connected to this one.
	 */
	flatten_links = no;

	/* Hide this server from a flattened /links output on remote
	 * servers.  It will not be hidden locally, only remotely.  This
	 * allows a /links output to contain for example only client servers.
	 */
        hidden = no;

	/* Prevent servers from hiding themselves from the flattened
         * /links output.
	 */
	disable_hidden = no;

	/* Hide the server a user is on in /whois etc, and make it use
	 * network_name and network_desc instead
	 */
	hide_servers = no;

	/* Disable users from doing remote commands on other servers from
	 * your server, ie: /motd some.hubserver
	 */
	disable_remote_commands = no;

	/* Disable users from joining &channels (local channels).  This is
	 * an extreme, but anybody in a &channel is on the same server,
	 * theyre here as it is a flaw in serverhide, however we do not
	 * recommend enabling this, it removes far more from users than what
	 * it gives back in security.
	 */
	disable_local_channels = no;
};

/* The general block contains many of the options that were once compiled
 * in options in config.h.  The general block is read at start time.
 */
general {
	/* Specify the default setting of FLOODCOUNT at startup.
	 * This is how many lines per second we allow before we throttle
	 * users MSGs/Notices ONLY affects the startup value, otherwise
	 * use: /quote set floodcount.
	 */
        default_floodcount = 10;

	/* Send a notice to all opers on the server when someone tries
	 * to OPER and uses the wrong password, or the wrong host or ident.
	 */
	failed_oper_notice = yes;

	/* Define how many '.' characters are permitted in an ident reply
	 * before rejecting the user.
	 */
	dots_in_ident=2;

	/* dot_in_ip6_addr
	 * older servers (hybrid6.0 and earlier) will disallow hosts that
	 * dont have a '.' in.  this will add a '.' to the end of ip6 hosts
	 *
	 * only needed if older servers exist on the network
	 */
        dot_in_ip6_addr = yes;
        
        /* Define how many non-wildcard (not: '.' '*' '?' '@') characters are
	 * needed in klines/dlines/glines for them to be placed.  Does not affect
	 * klines hand-placed in kline.conf.  eg to disallow *@*.com.
	 */
	min_nonwildcard = 4;

        /* how many nicknames someone may /accept in +g umode */
        max_accept = 20;

	/* Enable the nick flood control code. */
	anti_nick_flood = yes;
	/* These settings will allow 5 nick changes in 20 seconds. */
	max_nick_time = 20 seconds;
	max_nick_changes = 5;

        /* Do not allow the clients exit message to be
         * sent to a channel if the client has been on for less than
         * anti_spam_exit_message_time
         * The idea is, some spambots exit with their spam, thus advertising
         * this way. (idea due to ThaDragon, I just couldn't find =his= code).
	 */
        anti_spam_exit_message_time = 5 minutes;

	/* Define the time delta permissible for a remote server connection.
	 * If our timestamp and the remote server's timestamp are over
	 * ts_max_delta different, the connection will be dropped.  If it
	 * is less than ts_max_delta but more than ts_warn_delta, send 
	 * a notice to opers on the server, but still allow the connection.
	 * Overrides the compiled in defaults.
	 */
	ts_warn_delta = 30 seconds;
	ts_max_delta = 5 minutes;

	/* When a user QUITs, prepend their QUIT message with "Client exit:"
	 * in order to help prevent against faking server error messages (eg.
	 * ping timeout, connection reset by peer).
	 */
	client_exit = yes;

	/* Show the reason why the user was K-lined or D-lined to the "victim"
	 * It's a neat feature except for one thing... If you use a tcm
	 * and it shows the nick of the oper doing the kline (as it does by 
	 * default) Your opers can be hit with retaliation... Or if your 
	 * opers use scripts that stick an ID into the comment field. etc.
	 * It's up to you whether you want to use it or not.
	 */
	kline_with_reason = yes;

	/* Force the sign-off reason to be "Connection closed" when a user is
	 * K-lined.  The user will still see the real reason.  This prevents 
	 * other users seeing the client disconnect from harassing the IRCops.
	 */
	kline_with_connection_closed = no;

	/* Set to "yes" if you wish your server to flag and not apply redundant
	 * K-lines.
	 */
	non_redundant_klines = yes;

	/* Enable this if you want opers to get noticed about "things" trying
	 * to connect as servers that don't have N: lines.  Twits with 
	 * misconfigured servers can get really annoying with this enabled.
	 */
	warn_no_nline = yes;

	/* Set STATS o to be oper only */
	stats_o_oper_only=yes;

	/* set STATS P to be oper only (ports) */
	stats_P_oper_only=no;

	/* We can either show users a full stats I list: 
	 *                                      stats_i_oper_only=no;
	 * a list of auth blocks matching them: stats_i_oper_only=masked;
	 * or make the list oper only:          stats_i_oper_only=yes;
	 */
	stats_i_oper_only=masked;

	/* We can either show users a full stats k/K list:
	 *                                 stats_k_oper_only=no;
	 * a list of klines matching them: stats_k_oper_only=masked;
	 * or make the list oper only:     stats_k_oper_only=yes;
	 */
	stats_k_oper_only=masked;
                                    
	/* time between notifications of ignored messages in +g mode */
	caller_id_wait = 1 minute;

	/* time between uses of less intensive commands, HELP/WHOIS/WHOWAS */
	pace_wait_simple = 1 second;

	/* time between uses of various commands like STATS */
	pace_wait = 10 seconds;

	/* There are clients ignoring the FORCE_MOTD numeric.  There is no 
	 * no point forcing MOTD on connecting clients IMO.  Give them a short
	 * NOTICE telling them they should read the MOTD, and leave it at that.
	 */
	short_motd = no;

	/* Enable PING cookies, clients must respond to a random string
	 * sent to them in a PING command before being accepted by the server.
	 * This is used to help block certain types of drones and FTP PASV
	 * mode "spoofing".  The default is 'no'
	 */
	ping_cookie = no;

	/* Set to "yes" to disable flood control for opers. */
	no_oper_flood = yes;

	/* Enable G-lines */
	glines = yes;

	/* Set the time for how long G-lines will last.  This example is
	 * the old setting of 12 * 3600. 
	 */
	gline_time = 1 day;

	/* Define the maximum amount of time a user can idle before 
	 * disconnecting them.  Set to 0 to disable.
	 */
        idletime = 0;

	/* This is useful for leaf nodes and gateways. It keeps you from
	 * connecting to too many places. It works by keeping you from
	 * connecting to more than "n" nodes which you have C:blah::blah:6667
	 * lines for.
   	 *
	 * Note that any number of nodes can still connect to you. This only
	 * limits the number that you actively reach out to connect to.
	 *
	 * This value is only used if you don't have server classes defined,
	 * and a server is in class 0 (the default class if none is set).
	 */
	maximum_links = 1;

	/* This line will prevent the ircd from loading.  Remove it.  */
	havent_read_conf = 1;
	
	/* Define these to the log files you want to use for user connections
	 * (userlog), successful use of /oper (operlog), and failed use of
	 * /oper (foperlog).  Logging will stop if either these files do not
 	 * exist, or if they are not defined.
	 */
	fname_userlog = "logs/userlog";
	fname_operlog = "logs/operlog";
	fname_foperlog = "logs/foperlog";

	/* max_targets
	 * only max_target targets can be PRIVMSG'ed / NOTICE'd in a single
	 * command. default is 4 if not defined here. setting to 0 will have
	 * broken results (ie PRIVMSG/NOTICE won't work).
	 */
	max_targets = 4;

	/* client_flood
	 * max number of _lines_ from a client that will be buffered
	 * awaiting parsing, before dropping with 'Excess Flood'
	 */
	client_flood = 20;

	/* message_locale
	 * default message locale to use if gettext() is enabled
	 * Use "custom" for the (in)famous Hybrid custom messages.
	 * Use "standard" for the compiled in defaults.
	 */
	message_locale = "custom";

	/* List of usermodes for the next two options:

	 * Complete list:
	 * +a - NONE       - Admin status.  OPER controls this
	 * +b - bots       - See bot and drone flooding notices
	 * +c - cconn      - Client connection/quit notices
	 * +d - debug      - See debugging notices
	 * +f - full       - See I: line full notices
	 * +g - callerid   - Server Side Ignore
	 * +i - invisible  - Not shown in NAMES or WHO unless you share a 
	 *                   a channel
	 * +k - skill      - See server generated KILL messages
	 * +l - locops     - See LOCOPS messages
	 * +n - nchange    - See client nick changes
	 * +o - NONE       - Operator status.  OPER controls this
	 * +r - rej        - See rejected client notices
	 * +s - servnotice - See general server notices
	 * +u - unauth     - See unauthorized client notices
	 * +w - wallop     - See server generated WALLOPS
	 * +x - external   - See remote server connection and split notices
	 * +y - spy        - See LINKS, STATS (if configured), TRACE notices
	 * +z - operwall   - See oper generated WALLOPS
	 */
	 
	/*
 	 * List of usermodes that only operators can set.  Useful for
	 * stopping clients setting modes they shouldnt be using like wallops.
	 */
	oper_only_umodes = bots, cconn, debug, full, skill, nchange, 
                     rej, spy, external, operwall, locops, unauth;

	/* List of usermodes that get set when a user /oper's
	 * Default: locops, wallop, operwall, servnotice.	
	 */
	oper_umodes = locops, servnotice, operwall, wallop;


	/*
	 * servlink_path defines the path to the 'servlink' program.
	 *
	 * servlink is included with hybrid-7, and by default is installed
	 * in the same directory as ircd, which is usually
	 * /usr/local/ircd/bin.
	 *
	 * servlink is used to perform encryption/compression of
	 * server<->server links.
	 */
	servlink_path = "/usr/local/ircd/bin/servlink";

	/*
	 * default_cipher_preference = cipher;
	 *
	 * Determines the default cipher preference to use for a link,
	 * if no cipher_preference line is set for that connect {} block.
	 */
	# e.g. Use BF/256 unless overriden in connect {} block.
	# default_cipher_preference = "BF/256";

	/*
	 * If your system does not have *random devices and you want to be
	 * able to use OpenSSL and CRYPT_LINKS, set this and option
	 * below if necessary. Beware - EGD is *very* CPU intensitive
	 * process when gathering data for its pool.
	 */
	# use_egd = yes;

	/*
	 * Define location of EGD pool. Not necessary for OpenSSL >= 0.9.7
	 * since it will automagically check locations.
	 */
	# egdpool_path = "/var/run/egd-pool";


	/*
	 * compression_level = <level>;
	 *
	 * Allows you to select desired trade off between speed/compression.
	 *
	 * Available values are 1 (least compression, fastest)
	 * through 9 (most compression, slowest).
	 *
	 * The default value is 6.
	 */
	# compression_level = 9;

	/*
	 * throttle_time = <time>;
	 * Allows you to set the minimum amount of time allowed between
	 * connections from the same IP. This drops flooders very
	 * quickly(long before usernames or hostnames are looked up), and
	 * it is recommended you set it to at least 15 seconds. If you do
	 * decide to disable it, use: */
	 # throttle_time = 0;
	/* Note that dline exempts work against throttling too, and you
	 * should make yourself and the servers which connect to you dline
	 * exempt.
	 */
	throttle_time = 30;

};

modules {
	/* things relating to modules */

	/* set paths for module.  these paths are searched both for
	 * module="" and /quote modload, when a relative pathname
	 * is specified. 
	 */
	path = "/usr/local/ircd/modules";
	path = "/usr/local/ircd/modules/autoload";

	/* load a module upon startup (or rehash) */
	#module = "some_module.so";
};
