/* doc/convertconf-example.conf - ircd-hybrid-7 Example configuration file
 * Copyright (C) 2000-2002 Hybrid Development Team
 *
 * Written by ejb, wcampbel, db, leeh and others
 *
 * $Id$
 */

/* logging {}: contains information about logfiles. */
logging {
	/* log level: the amount of detail to log in ircd.log.  The
	 * higher, the more information is logged.  May be changed
	 * once the server is running via /quote SET LOG.  Either:
	 * L_CRIT, L_ERROR, L_WARN, L_NOTICE, L_TRACE, L_INFO or L_DEBUG
	 */
	log_level = L_INFO;
};

/* shared {}: users that are allowed to remote kline (OLD U:) */
shared {
	/* name: the server the user must be on to set klines.  If this is not
	 * specified, the user will be allowed to kline from all servers.
	 */
	name = "irc2.some.server";

	/* user: the user@host mask that is allowed to set klines.  If this is
	 * not specified, all users on the server above will be allowed to set
	 * a remote kline.
	 */
	user = "oper@my.host.is.spoofed";
};

/* kill {}: users that are not allowed to connect (OLD K:)
 * Oper issued klines will be added to the specified kline config
 */
kill {
	user = "bad@*.hacked.edu";
	reason = "Obviously hacked account";
};

/* deny {}: IPs that are not allowed to connect (before DNS/ident lookup)
 * Oper issued dlines will be added to the specified dline config
 */
deny {
	ip = "10.0.1.0/24";
	reason = "Reconnecting vhosted bots";
};

/* exempt {}: IPs that are exempt from deny {} and Dlines. (OLD d:) */
exempt {
	ip = "192.168.0.0/16";
};

/* resv {}: nicks and channels users may not use/join (OLD Q:) */
resv {
        /* reason: the reason for the proceeding resv's */
        reason = "There are no services on this network";

	/* resv: the nicks and channels users may not join/use */
	nick = "nickserv";
	nick = "chanserv";
	channel = "#services";

	/* resv: wildcard masks are also supported in nicks only */
	reason = "Clone bots";
	nick = "clone*";
};

/* gecos {}:  The X: replacement, used for banning users based on their
 * "realname".  The action may be either:
 *      warn:   allow client to connect, but send message to opers
 *      reject: drop clients but also send message to opers.
 *      silent: silently drop clients who match.
 */
gecos {
	name = "*sex*";
	reason = "Possible spambot";
	action = warn;
};

gecos {
	name = "sub7server";
	reason = "Trojan drone";
	action = reject;
};

gecos {
	name = "*http*";
	reason = "Spambot";
	action = silent;
};

/* The channel block contains options pertaining to channels */
channel {
	/* invex: Enable/disable channel mode +I, a n!u@h list of masks
	 * that can join a +i channel without an invite.
	 */
	use_invex = yes;

	/* except: Enable/disable channel mode +e, a n!u@h list of masks
	 * that can join a channel through a ban (+b).
	 */
	use_except = yes;

	/* anonops: Enable/disable channel mode +a.  This hides the people
	 * who are opped in the channel from people who are unopped.
	 *
	 * The ircd will 'sync' the users oplists when they become opped
	 * or deopped by sending mode changes.  This can cause a flood and
	 * could potentially be abused.
	 */
	use_anonops = no;

        /* vchans: permit virtual channels, multiple copies of the same
	 * channel name.  read doc/vchans.txt for more details
	 *
	 * We advise against using this on production networks
         */
        use_vchans = yes;

	/* vchans oper only: only allow opers to create vchans via /cjoin */
	vchans_oper_only = yes;

	/* knock: Allows users to request an invite to a channel that
	 * is locked somehow (+ikl).  If the channel is +p or you are banned
	 * the knock will not be sent.
	 */
	use_knock = yes;

	/* knock delay: The amount of time a user must wait between issuing
	 * the knock command.
	 */
	knock_delay = 5 minutes;

	/* knock channel delay: How often a knock to any specific channel
	 * is permitted, regardless of the user sending the knock.
	 */
	knock_delay_channel = 1 minute;

	/* max chans: The maximum number of channels a user can join/be on. */
	max_chans_per_user = 15;

        /* quiet on ban: stop banned people talking in channels. */
        quiet_on_ban = yes;

        /* max bans: maximum number of +b/e/I modes in a channel */
        max_bans = 25;

	/* persist time: the minimum amount of time a channel will remain with
	 * all its modes intact once the last user has left the channel.
	 *
	 * set to 0 to disable.
	 */
	persist_time = 30 minutes;

        /* splitcode: the ircd will check every 60s as to whether splitmode
	 * should be disabled or not, so there may be a delay between a
	 * netsplit ending and splitmode ending.
	 *
	 * both split users and split servers must be true to enter splitmode
	 * 
	 * you may force splitmode to be permanent by /quote set splitmode on
	 */

	/* split users: when the usercount is lower than this level, consider
	 * ourselves split.  this must be set for automatic splitmode
	 */
	default_split_user_count = 0;

	/* split servers: when the servercount is lower than this, consider
	 * ourselves split.  this must be set for automatic splitmode
	 */
	default_split_server_count = 0;

	/* split no create: disallow users creating channels on split, works in 
	 * tandem with persistant channels, that have retained their modes.
	 */
	no_create_on_split = no;

	/* split: no join: disallow users joining channels at all on a split */
	no_join_on_split = no;
};


/* The serverhide block contains the options regarding serverhiding */
serverhide {
	/* flatten links: this option will show all servers in /links appear
	 * that they are linked to this current server
	 */
	flatten_links = no;

	/* links delay: how often to update the links file when it is
	 * flattened.
	 */
	links_delay = 5 minutes;

	/* hidden: hide this server from a /links output on servers that
	 * support it.  this allows hub servers to be hidden etc.
	 */
        hidden = no;

	/* disable hidden: prevent servers hiding themselves from a
	 * /links ouput.
	 */
	disable_hidden = no;

	/* hide servers: hide remote servernames everywhere and instead use
	 * network_name and network_desc.
	 */
	hide_servers = no;

	/* disable remote: disable users doing commands on remote servers */
	disable_remote_commands = no;

	/* disable local channels: prevent users from joining &channels.
	 * This is extreme, but its still a flaw in serverhide.  It will
	 * however remove far more from users than it will give back in
	 * security.
	 */
	disable_local_channels = no;
};

/* The general block contains many of the options that were once compiled
 * in options in config.h.  The general block is read at start time.
 */
general {
	/* floodcount: the default value of floodcount that is configurable
	 * via /quote set floodcount.  This is the amount of lines a user
	 * may send to any other user/channel in one second.
	 */
        default_floodcount = 10;

	/* failed oper notice: send a notice to all opers on the server when 
	 * someone tries to OPER and uses the wrong password, host or ident.
	 */
	failed_oper_notice = yes;

	/* dots in ident: the amount of '.' characters permitted in an ident
	 * reply before the user is rejected.
	 */
	dots_in_ident=2;

	/* dot in ipv6: ircd-hybrid-6.0 and earlier will disallow hosts 
	 * without a '.' in them.  this will add one to the end.  only needed
	 * for older servers.
	 */
        dot_in_ip6_addr = yes;
        
        /* min nonwildcard: the minimum non wildcard characters in k/d/g lines
	 * placed via the server.  klines hand placed are exempt from limits.
	 * wildcard chars: '.' '*' '?' '@'
	 */
	min_nonwildcard = 4;

        /* max accept: maximum allowed /accept's for +g usermode */
        max_accept = 20;

	/* nick flood: enable the nickflood control code */
	anti_nick_flood = yes;

	/* nick flood: the nick changes allowed in the specified period */
	max_nick_time = 20 seconds;
	max_nick_changes = 5;

        /* anti spam time: the minimum time a user must be connected before
	 * custom quit messages are allowed.
	 */
        anti_spam_exit_message_time = 5 minutes;

	/* ts delta: the time delta allowed between server clocks before
	 * a warning is given, or before the link is dropped.  all servers
	 * should run ntpdate/rdate to keep clocks in sync
	 */
	ts_warn_delta = 30 seconds;
	ts_max_delta = 5 minutes;

	/* client exit: prepend a users quit message with "Client exit: " */
	client_exit = yes;

	/* kline reason: show the user the reason why they are k/d/glined 
	 * on exit.  may give away who set k/dline when set via tcm.
	 */
	kline_with_reason = yes;

	/* kline connection closed: make the users quit message on channels
	 * to be "Connection closed", instead of the kline reason.
	 */
	kline_with_connection_closed = no;

	/* non redundant klines: flag and ignore redundant klines */
	non_redundant_klines = yes;

	/* warn no nline: warn opers about servers that try to connect but
	 * we dont have a connect {} block for.  Twits with misconfigured 
	 * servers can get really annoying with this enabled.
	 */
	warn_no_nline = yes;

	/* stats o oper only: make stats o (opers) oper only */
	stats_o_oper_only=yes;

	/* stats P oper only: make stats P (ports) oper only */
	stats_P_oper_only=no;

	/* stats i oper only: make stats i (auth {}) oper only. set to:
	 *     yes:    show users no auth blocks, made oper only.
	 *     masked: show users first matching auth block
	 *     no:     show users all auth blocks.
	 */
	stats_i_oper_only=masked;

	/* stats k/K oper only: make stats k/K (klines) oper only.  set to:
	 *     yes:    show users no auth blocks, made oper only
	 *     masked: show users first matching auth block
	 *     no:     show users all auth blocks.
	 */
	stats_k_oper_only=masked;
                                    
	/* caller id wait: time between notifying a +g user that somebody
	 * is messaging them.
	 */
	caller_id_wait = 1 minute;

	/* pace wait simple: time between use of less intensive commands
	 * (HELP, remote WHOIS, WHOWAS)
	 */
	pace_wait_simple = 1 second;

	/* pace wait: time between more intensive commands
	 * (ADMIN, INFO, LIST, LUSERS, MOTD, STATS, VERSION)
	 */
	pace_wait = 10 seconds;

	/* short motd: send clients a notice telling them to read the motd
	 * instead of forcing a motd to clients who may simply ignore it.
	 */
	short_motd = no;

	/* ping cookies: require clients to respond exactly to a ping command,
	 * can help block certain types of drones and FTP PASV mode spoofing.
	 */
	ping_cookie = no;

	/* no oper flood: increase flood limits for opers. */
	no_oper_flood = yes;

	/* glines: enable glines, network wide temp klines */
	glines = yes;

	/* gline time: the amount of time a gline will remain before exiring */
	gline_time = 1 day;

	/* idletime: the maximum amount of time a user may idle before
	 * they are disconnected
	 */
        idletime = 0;

	/* maximum links: the maximum amount of servers to connect to for
	 * connect blocks without a valid class.
	 */
	maximum_links = 1;

	/* REMOVE ME.  The following line checks youve been reading. */
	havent_read_conf = 1;
	
	/* logfiles: the logfiles to use for user connects, /oper uses,
	 * and failed /oper.  These files must exist for logging to be used.
	 */
	fname_userlog = "logs/userlog";
	fname_operlog = "logs/operlog";
	fname_foperlog = "logs/foperlog";

	/* max targets: the maximum amount of targets in a single 
	 * PRIVMSG/NOTICE.  set to 0 for unlimited targets.
	 */
	max_targets = 4;

	/* client flood: maximum number of lines in a clients queue before
	 * they are dropped for flooding.
	 */
	client_flood = 20;

	/* message locale: the default message locale if gettext() is enabled
	 * and working.
	 * Use "custom" for the (in)famous Hybrid custom messages.
	 * Use "standard" for the compiled in defaults.
	 */
	message_locale = "custom";

	/* usermodes configurable: a list of usermodes for the options below
	 *
	 * +b - bots       - See bot and drone flooding notices
	 * +c - cconn      - Client connection/quit notices
	 * +d - debug      - See debugging notices
	 * +f - full       - See I: line full notices
	 * +g - callerid   - Server Side Ignore
	 * +i - invisible  - Not shown in NAMES or WHO unless you share a 
	 *                   a channel
	 * +k - skill      - See server generated KILL messages
	 * +l - locops     - See LOCOPS messages
	 * +n - nchange    - See client nick changes
	 * +r - rej        - See rejected client notices
	 * +s - servnotice - See general server notices
	 * +u - unauth     - See unauthorized client notices
	 * +w - wallop     - See server generated WALLOPS
	 * +x - external   - See remote server connection and split notices
	 * +y - spy        - See LINKS, STATS, TRACE notices etc.
	 * +z - operwall   - See oper generated WALLOPS
	 */
	 
	/* oper only umodes: usermodes only opers may set */
	oper_only_umodes = bots, cconn, debug, full, skill, nchange, 
                     rej, spy, external, operwall, locops, unauth;

	/* oper umodes: default usermodes opers get when they /oper */
	oper_umodes = locops, servnotice, operwall, wallop;

	/* servlink path: path to 'servlink' program used by ircd to handle
	 * encrypted/compressed server <-> server links.
	 *
	 * only define if servlink is not in same directory as ircd itself.
	 */
	#servlink_path = "/usr/local/ircd/bin/servlink";

	/* default cipher: default cipher to use for cryptlink when none is
	 * specified in connect block.
	 */
	#default_cipher_preference = "BF/256";

	/* use egd: if your system does not have *random devices yet you
	 * want to use OpenSSL and encrypted links, enable this.  Beware -
	 * EGD is *very* CPU intensive when gathering data for its pool
	 */
	#use_egd = yes;

	/* egdpool path: path to EGD pool. Not necessary for OpenSSL >= 0.9.7
	 * which automatically finds the path.
	 */
	#egdpool_path = "/var/run/egd-pool";


	/* compression level: level of compression for compressed links between
	 * servers.  
	 *
	 * values are between: 1 (least compression, fastest)
	 *                and: 9 (most compression, slowest).
	 */
	#compression_level = 6;

	/* throttle time: the minimum amount of time between connections from
	 * the same ip.  exempt {} blocks are excluded from this throttling.
	 * Offers protection against flooders who reconnect quickly.  
	 * Set to 0 to disable.
	 */
	throttle_time = 10;
};

modules {
	/* module path: paths to search for modules specified below and 
	 * in /modload.
	 */
	path = "/usr/local/ircd/modules";
	path = "/usr/local/ircd/modules/autoload";

	/* module: the name of a module to load on startup/rehash */
	#module = "some_module.so";
};
