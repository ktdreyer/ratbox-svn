          Lazy Links As Implemented in Hybrid
	  ===================================

  First off, read the original LazyLinks.txt spec.

  I will outline differences. Nicks are at present, always sent.
This can easily be removed in LL version 2, more closely matching
the original LazyLinks spec.

  The bit map idea was used to mark which channels a leaf "knows" about.
This limits the number of LL servers to a hub at 32 for now. This is
easily rewritten, though a little more code consumming. I'd add another
unsigned long to each channel struct.

Now from original LazyLinks spec:


"1.1) Joining

When a client on a LLL sends a "JOIN #channel", LLL does as usual: if it
has the channel locally, it just joins the user, sends an SJOIN to HUB,
and all is well; if it doesn't have the channel, it creates it, sends a
SJOIN to HUB with the current time as the TS.  LLL tells the user that it
has joined the channel, but it doesn't tell it that it has ops yet.  So
LLL sends"

This was modified to this:

[LLL -> HUB]     :LLL CBURST #channel <LLLuser|LLLuser key>

  The Lazy Link server (LLL), tells the HUB, it wants a channel burst for
"#channel", with optional LLLuser joining. The HUB will send
a channel burst back for the specified channel in either case. This
results in the leaf now knowing about the channel. This helps prevent
"chatter," as the LLLuser could be trying to repeatedly join a channel
they are banned on. It now becomes the LLL servers responsibility
as usual in the non LL case.

  There is another case a CBURST is sent. If an user on the LLL server
is already on a channel that exists on HUB, this CBURST request will
be sent as the LLL joins the HUB for each channel that a LLL client
exists on. This way, all clients see consistent information about
each channel. It appears to each client as a normal resync.

  If the LLL sends the optional "LLLuser", the uplink will check to
see if that client can join, using the rules of that channel. Depending
on what the HUB finds, the HUB will send back;

[HUB -> LLL]      :HUB LLJOIN #channel LLLuser Flag

Where Flag is one of the following:

'I'   - Channel is invite only.
'B'   - User is banned.
'K'   - Channel is keyed, and user did not have right key.
'F'   - Channel is full.
'J'   - User can join channel.

[LLL -> LLLuser]  :LLLuser JOIN #channel

"1.2) Bursts

The beauty of this is that, with the rules above, channel bursts get
avoided, without the need to do anything more.

When LLL and HUB connect to each other, LLL sends a channel burst as
usual; HUB doesn't.  By the rules above, HUB will reply to each first
LLL's SJOIN for a channel with a SJOIN back with its own info.  So at the
end of the burst, LLL has been put up to date with all the channels it
needs to know about."


"1.3) Parts, Kicks and Modes

When one of LLL's clients (say, LLLuser) leaves a channel, or is kicked
out of it, LLL needs to check if that was the last of its clients for
that channel.  

If that is the case, then LLL needs to inform HUB that it no longer holds
#channel, and destroy its local information about #channel:

	[LLL -> HUB]   :LLL DROP #channel


Upon receiving a "DROP" command from a Lazy Leaf, the Hub just clears
the Lazy Leaf's bit on that channel.

Alternatively, a Lazy Leaf could decide to cache channels even without
having any clients on them.  All it has to do is not send the "DROP"
command to its hub."

  In this implementation, the local channel is cached on LLL, with 
a timer running to clear out old local channels. After a configurable
number of seconds, any channel that has no local users on it is removed
locally, and the "DROP" is sent to the HUB. This again, helps prevent
channel "chatter." As it could be a local client trying to repeatedly
join a channel it is not wanted on. This stops a new CBURST being sent
for each non wanted join.


"2) Nicks

Nicks are simpler, because they are atomic, there is no list associated
with them."

  We have not implemented the nick part yet. Its easier, but not yet
done. Its questionable whether we need this yet.

- Diane Bruce <db@db.net>