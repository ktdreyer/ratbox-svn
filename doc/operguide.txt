
EFnet Oper Guide	Sources used : opers.txt
10-30-2000
By Riedel

 1.  Commands you should know about
 2.  The client of your choice
 3.  Your primary responsibilities
 4.  Rerouting
 4.1 Rerouting other servers and remote connects
 5.  Kills and klines
 6.  Kill and K-Line requests
 7.  Happy birthday!
 8.  Security
 9.  Know who your friends are
10.  The TCM bot

1. Commands you should know about

CLOSE		Close any connections from clients who have not fully
		registered yet.
Example		/quote close

CONNECT		CONNECT <server_A> [port] [server_B]
		When [server_B] is used, CONNECT asks [server_B] to
		connect to <server_A>.  Global Opers only.

		When [server_B] is not used, CONNECT trys to connect
		your server to <server_A>.  Local and Global Opers.

		When [port] is used, the connection will be attempted
		to [port].
		When [port] is not used, 6667 is used as a default.
Examples	/quote connect irc.best.net 6667 irc.exodus.net
		[you ask irc.exodus.net to connect to irc.best.net]
		/quote connect irc.exodus.net 6665
		[connect your server to irc.exodus.net on port 6665]

DIE		DIE server.name [reason]
		Terminates the IRC server with optional reason
		[reason]
Example		/quote die my.server.com recompile

DLINE		DLINE <nick|ip> :[reason]
		Adds a DLINE to the ircd.conf or klines.conf file
		which will deny any connections from the IP address
		of the banned client.  The banned client will receive
		a message saying he/she is banned with reason [reason]

		In order to use <nick> rather than <ip>, <nick> must
		be on your server.
Example		/quote dline 129.125.24.* :abuse
		[this would D-Line 129.125.24.0-255]
		/quote dline 129.125.24.0/23 :abuse
		[this would D-Line 129.125.24.* and 129.125.25.*]

DNS		DNS
		Shows some stats about ircd's asynchronous resolving code
Example		/quote dns

HASH		HASH
		Shows some stats about ircd's internal hashes.
Example		/quote hash

HTM		HTM [option]
		When no [option] is given, HTM shows the current
		High Traffic Mode rate and whether HTM is on or off.

		[option] can be one of the following:
		  ON        - Forces High Traffic Mode to be on.  With
		              this on, ircd is more efficient in
		              reading server-to-server traffic and
		              oper traffic, but will be less efficient
		              than normal with normal client traffic.
		  OFF       - Forces High Traffic Mode to be off.
		              (see above)
		  TO <rate> - Sets the High Traffic Mode rate to
		              <rate>.  Ircd will automatically go
		              into High Traffic Mode when <rate>
		              is reached, and will automatically turn
		              it off when things calm down.
		  QUIET     - When set, ircd will not notify opers
		              when it goes into and out of High
		              Traffic Mode.
		  NOISY     - When set, ircd will notify opers
		              when it goes into and out of High
		              Traffic Mode.
Example		/quote set htm to 50
		[set high traffic mode to 50kb/s]
		/quote set htm off
		[set htm off]
		/quote set htm quiet
		[do not notify opers when server goes into HTM]

KLINE		KLINE <nick|user@host> :[reason]
		Adds a KLINE to the ircd.conf or klines.conf file which
		will ban the specified user from using that server.
		The banned client will receive a message saying he/she
		is banned with reason [reason]

		KLINE user@ip.ip.ip.ip :[reason]
		will kline the user at the unresolved ip.
		ip.ip.ip.ip can be in CIDR form i.e. 192.168.0.0/24
		or 192.168.0.* (which is converted to CIDR form internally)

		For a temporary KLINE, length of kline is given in
		minutes as the first parameter i.e.
		KLINE 10 <nick|user@host> :cool off for 10 minutes
Examples	/quote kline *bad@*.user.com :bad bad user!
		[kline *bad@*.user.com]
		/quote kline 1440 *bad@*.user.com :lamer!
		[kline *bad@*.user.com for 1440 minutes (24 hours)]
		/quote kline *user@129.124.24.0/24 :clones
		[kline *user within the 129.124.24.* range]

LOCOPS		LOCOPS :<message>
		Sends an LOCOPS message of <message. o to all
		opers on local server who are umode +w and +z
Example		/quote locops :lots of clones connecting...

LTRACE		LTRACE [server|nick]
		-- If compiled with LTRACE --
		Displays only Oper, Serv, Link, and Class reports even if
		the O-line is active.  Useful for just showing pertinent
		info of a specific server.  Note however that if the
		target server is not running this option then you will
		still receive a normal trace output.  Server with this
		option remove "STATS p" funtionality since the two are
		basically redundant.
Examples	/quote ltrace nick
		/quote ltrace irc.server.com

LWALLOPS	LWALLOPS :<message>
		-- If compiled with LWALLOPS --
		Same as LOCOPS (see above)
Example		/quote lwallops :local wallop message

OPERWALL	OPERWALL :<message>
		Sends an OPERWALL message of <message> to all
		opers who are umode +w and +z
Example		/quote operwall :STOP ABUSING OPERWALL "#)_$
		[send an operwall, for every oper on the network to see]

REHASH		REHASH [option]
		When no [option] is given, ircd will re-read the
		ircd.conf file.

		[option] can be one of the following:
		  DNS     - Re-read the /etc/resolv.conf file
		  IP      - Reloads the IP hash for the new and
		            improved ACKPATCH.  Should never need
		            to be used.
		  TKLINES - Clears temporary klines
		  GLINES  - Clears G lines
		  GC      - Performs garbage collecting of excess
		            memory.
		  MOTD    - Re-reads MOTD file
		  HELP    - Re-reads this HELP file
		  DLINES  - Re-hashes D-lines
Examples	/quote rehash tklines
		[rehash the temporary klines. (they'll be removed)]

RESTART		RESTART
		Restarts the IRC server.
Example		/quote restart

SET		SET <option> <value>
		<option> can be one of the following:
		  LOG       - Sets the Logging level for what is logged
		              to ircd.log and syslog.
		  MAX       - Sets the number of max connections
		              to <value>.  (This number cannot exceed
		              HARD_FDLIMIT in config.h)

		 -- The following three are if compiled with FLUD --
		  FLUDNUM   - Sets the number of flud messages to
		              trip flud alarm to <value>
		  FLUDTIME  - Sets the number of seconds in which
		              FLUDNUM msgs must occur to <value>
		  FLUDBLOCK - Sets the number of seconds to block
		              fluds to <value>

		 -- The following is if compiled with NO_CHANOPS_ON_SPLIT
		    or NO_JOIN_ON_SPLIT or PRESERVE_CHANNEL_ON_SPLIT
		  SPLITDELAY - Sets how long after the connect burst
		               starts before ops can be hacked on new
		               channels. 5(minutes) is usually plenty.
		               Disable using 0.

		  SMALLNET   - Below this number of servers present
		               means special split handling is now on.

		 -- The following is if compiled with ANTI_SPAMBOT
		  SPAMNUM   - Sets how many join/parts to channels
		              constitutes a possible spambot.
		  SPAMTIME  - Below this time on a channel
		              counts as a join/part as above.
Examples	/quote set smallnet 10
		/quote set splitdelay 2

SQUIT		SQUIT <server> [reason]
		Splits <server> away from your side of the net with
		[reason].
Examples	[SEE REROUTING SECTION]

STATS		STATS <letter> [server|nick]
		Queries server [server] (or your own server if no
		server parameter is given) for info corresponing to
		<letter>.
		LETTER (* = Oper only.)
		------ (^ = Can be configured to be oper only.)
		  c - Shows C/N lines
		^ b - Shows B lines
		^ d - Shows D lines
		^ e - Shows E lines
		^ f - Shows F lines
		  g - Shows G lines
		  h - Shows H/L lines
		  i - Shows I lines
		  K - Shows K lines (or matched klines)
		  k - Shows temporary K lines (or matched temp klines)
		  L - Shows IP and generic info about [nick]
		  l - Shows hostname and generic info about [nick]
		  m - Shows commands and their usage
		  o - Shows O/o lines
		  p - Shows opers connected and their idle times (disabled
		            if LTRACE option is enabled - see below)
		  r - Shows resource usage by ircd (only in DEBUGMODE)
		* t - Shows generic server stats
		  u - Shows server uptime
		  v - Shows connected servers and their idle times
		  y - Shows Y lines
		* z - Shows memory stats
		  ? - Shows connected servers and sendq info about them
Example		/stats ?
		/stats p
		/stats ? irc.exodus.net

TESTLINE	TESTLINE <user@host>|ip
		-- Looks up given user@host or user@ip
		returns info on any found I line or K line for that user,
		or D-line on ip.
Example		/quote testline 129.125.24.249

TRACE		TRACE [server|nick]
		TRACE shows client info about [server|nick] or about
		the server you are on if no [server|nick] is given.

		All users that use TRACE can see the path to
		[server|nick] if given and all servers and opers
		connected, as well as the connection class they
		fall into.
Example		/quote trace my.server.com
		[lists all connections to your server]
		/quote trace someguy
		[shows the route to someguy, until it reaches destination]

UNKLINE		UNKLINE <user@host>
		Will attempt to unkline the given <user@host>
		Will unkline a temporary kline.
Example		/quote unkline *@*.aol.com

WALLOPS		WALLOPS :<message>
		Sends a WALLOPS message of <message> to all opers
		who are umode +w and +z (see above)
Example		/quote wallops :this is a lame generic wallop message


2. The client of your choice

There are many IRC clients around for a wide variety of operating systems.
Being an IRC Operator doesn't *require* you to use a unix client, however
i personally prefer unix-based clients. If you're familiar with unix and use
unix for opering, i suggest ircII / epic. There are a lot of scripts available
for those two clients, and it's not that hard to write scripts yourself to
suite your needs. It is important that you know how to operate your client,
and familiarize yourself with the options and features. For whatever client
you chose this goes for any of them : You should be in control of your client,
instead of the client being in control of you.

Resources :

www.mirc.co.uk	  - mIRC (ms-windows)
www.irchelp.org   - a variety of clients and scripts
ftp.blackened.com - several unix based clients available


3. Your primary responsibilities

As an IRC Operator, you're responsible for maintaining the server on a
realtime basis. You represent your server, and you represent the network.
Irresponsible / rude / offensive / stupid behavior may discredit your server
and the network. You should focus on the task you were chosen for... maintance.
Sounds simple, no ? It means getting rid of users that abuse the service,
enforcing the server's policy and keeping the server linked. Users will ask
you questions, and expect you to know all the answers.. after all, you're the
oper!

Be prepared for users trying to fool you, sweettalk you into things you don't
want, lie and deceive. Most users are handling in good faith... however, the
abusers have learned how to manipulate opers. They have studied the alien
creature 'oper' for ages like biologists study animals. Be paranoid, be
curious and be suspicious. I can't stress the importancy of that often enough.

Second priority has the network. You were not chosen to maintain the network
but you were chosen to maintain the server. However, you may want to be able
to reroute servers. If you see something broken, don't be afraid to fix it.
If you do, be sure you fix things and don't make it worse. Before you
step into routing, be sure you've familiarised yourself with the network's
topology, and be confident enough to perform such actions. (re)routing is
covered in the next chapter.

Opers on the network depend on a trusting relationship. You can usually take
the word from an oper. Other opers are considered -trusted-. However, there
are exceptions. Sometimes even opers lie to opers to get things done. Don't
be afraid to ask for proof of a certain statement. For example, logs.
This doesn't mean you distrust the oper in question, but -you- and you alone
are responsible for your actions. You call the shots on your server, unless
your admin says otherwise.


4. Rerouting

Rerouting is not hard, and it's not scary but it is important that you do it
right. The commands you'll use are SQUIT and CONNECT. First, a very simple
example. Let's say your server, irc.yourserver.com is lagged to it's uplink,
irc.uplink.com and you want to reroute your server. You have to think about
where you want your server to be linked, and you have to time your reroute.
An example topology :
               

irc.yourserver.com ---- irc.uplink.com
                        |      |      \
                        B      C      D
                       / \
                      E   F
                         / \
                        G   H --- O
                      / | \ | \
                     I  J K L  M
                                \
                                 N

In this case, you're uplinked by irc.uplink.com
irc.uplink.com also hubs B, C and D. Server B functions as hub for E and F,
F hubs G and H, H hubs L, M and O. G hubs I, J and K. M hubs N.
Your server is allowed to connect to server B, F and G. So you consider the
servers you're able to connect to. Is the lag caused by a server that uplinks
irc.uplink.com ? Use /stats ? irc.uplink.com to determine lag to the other
servers. If irc.uplink.com does not respond, the lag is to your uplink. If so,
you cannot be sure about the state of the other uplinks, so you'd have to
get on a remote server and determine lag by using /stats ? and /trace. For
example, you could connect to server N, and /trace yournick. Yournick, being
the nick on your server. You'll see which route it takes, and what the problem
server is. Example /trace output :

S:[SERVER-N       ] V:[2.8/hybrid] U:[SERVER-M            ]
S:[SERVER-M       ] V:[2.8/hybrid] U:[SERVER-H            ]
S:[SERVER-H       ] V:[2.8/hybrid] U:[SERVER-F            ]
S:[SERVER-F       ] V:[2.8/hybrid] U:[SERVER-B            ]
S:[SERVER-B       ] V:[2.8/hybrid] U:[irc.uplink.com      ]
S:[irc.uplink.com ] V:[2.8/hybrid] U:[irc.yourserver.com  ]

The trace doesn't complete... server-b announces irc.uplink.com, and
irc.uplink.com announces your server. Your server should return something
like :

S:[irc.yourserver.] OPER [yournick!user@yourhost]

If it doesn't, we know the lag is only between yourserver and uplink.
Usually if there is lag between your server and your uplink, the sendqueue
rises. This is not always the case. Sometimes your server can write perfectly
to your uplink, but not reverse. That is called one sided lag.

We pick server B to link to. It means we have to SQUIT and CONNECT.
To unlink from irc.uplink.com and connect to SERVER_B we'd type :
/quote SQUIT irc.uplink.com reroute
/connect SERVER_B

we *DON'T* SQUIT irc.yourserver.com... and i'll try to explain why :
If we wanted to remove hub M from the network, and with it N, we'd issue
a SQUIT M. An SQUIT follows a path, relays the SQUIT request to each server in
that path. Finally it reaches server H, which is the hub for M. Server H sees
the SQUIT and drops the link to M.

Now a different situation, we want to seperate yourserver, uplink, C and D
from the rest of the network, in order to reroute. We'd have to SQUIT server B,
since we want the -uplink- of server B (being irc.uplink.com) to drop the link
to server B.

If you'd SQUIT irc.yourserver.com, you ask yourserver.com to drop the link to
itsself, which is impossible. If you SQUIT irc.uplink.com, you ask yourserver
to drop the link to uplink, which is what we want to do.

After the SQUIT and CONNECT, the new situation looks like this :

                        irc.uplink.com
                        |      |      \
  irc.yourserver.com -- B      C      D
                       / \
                      E   F
                         / \
                        G   H --- O
                      / | \ | \
                     I  J K L  M
                                \
                                 N

If yourserver is a HuB, it makes the situation more complex, since your actions
have more impact.


4.1 - Rerouting other servers and remote connects

Example topology :

                        irc.uplink.com
                        |      |      \
  irc.yourserver.com -- B      C      D
                       / \
                      E   F
                         / \
                        G   H --- O
                      / | \ | \
                     I  J K L  M
                                \
                                 N

Let's say, hub H is way lagged to F, but G to F is fine... we want to reroute
H, and stick H to G.

We'd do :

/quote SQUIT serverh rerouting you babe
/connect serverh 6667 serverg

A global wallops will be sent : !serverg! Remote CONNECT serverh 6667 from ItsMe

When rerouting, always give the server some time to prevent nick collides.
When there is lag, people will connect to another server. When you SQUIT and
CONNECT to fast, a lot of those clients will be collided. Also, stick to your
territory. How enthausiastic you may be, you cannot route the world. If you're
an oper on the US side, stick to the US side when rerouting. Needless to say,
if you're EU, keep it to EU ;)


5. Kills and klines

As an oper, you're given the incredible power *cough* of KILL and KLINE.
/kill nick reason  disconnects a client from IRC with the specified reason.
A /quote kline *evil@*.dude.org :reason here  bans the user from your server.
Abusive kills and klines may draw attacks to your server, so always consider
if a kline or kill is deserved. If the server gets attacked after a valid
kill or kline, well.. tough luck. You should never be 'afraid' to kline
anyone on your server. If it's a good reason, make it so. Even if you know
it may cause the server to be attacked. Maybe good to think about is this :
- if /ignore solves the problem rather than a kick, /ignore
- kick if a ban is unneeded
- ban if a /kill is unwarrented for
- kill rather than kline if that solves the problem
- kline when a server ban is really needed.

You kline a user when you absolutely don't want this user to use the service
your server is providing.

Crosskills (killing users on another server) are another issue. Some admins
don't care if users get /kill'ed off their server, for any reason or no
reason at all... and other admins are very anal about it. A good way to go
(imo) is to issue a KILL if there is an absolute need for the target user to
be disconnected. If there are active opers on that server, let them handle it.
They'll be upset if you /kill a user off their server, without contacting them.
/stats p irc.server.here shows the active opers on a particular server. Some
opers have multiple o-lines and are not watching all sessions. If you can't
find an active oper on a server, you can /quote operwall a request for opers
from that server.


6. Kill and K-Line requests

As previously mentioned, if an oper from another server contacts you and
requests a kill or a kline for a local client with a good reason, you can
usually trust this request. Opers depend on a trusting relationship. However,
since you're responsible for the kill or kline, it is not rude to ask for
proof. It depends on the oper making the request how thats interpreted, but
the way they respond to asking for proof tells more about them than about you.

The more and longer you oper, how better you get to know the other opers.
You know who is Mr. honest, you'll know who are lying and deceiving. Before you
acquire this knowledge, you can merely rely on common sense and instincts.
You'll probably make mistakes occasionally, and thats nothing to be ashamed of.
Opers are - despite contrary believes - human.

Users occasionally will ask you to kill or kline a user/bot too. Some requests
are straight-forward and clear, others require you to be cautious. I recommend
to always investigate such requests, and when you're confident the request
is valid, issue the kill or kline.


7. Happy birthday!

It is a custom on EFnet to birthday /kill opers of whom it is his/her birthday.
Not all opers like this, but typically those opers don't let others know about
their birthday. You'll notice that the KILLS say a lot about who likes who
and who is friends with who. Wether you want to participate, is entirely up to
you.


8. Security

As with any privilege, you have to handle it cautiously and responsibly.
Be sure that your o/O line doesn't get compromised! Oper only from secure
hosts. You and only you should know your password. Don't share your oper
account, and make your oper password a UNIQUE one. If your o/O line gets
compromised, nasty things may/will happen. Imagine an oper with crosskill
capabilities whoms operline gets 'hacked'... the results are often
disasterous and you will lose respect and trust from others. It can cause
your oper privileges to be revoked, or even the server to be (temporarily)
delinked.


9. Know who your friends are

As an oper you will get a lot of users that want to be 'friends' with you.
Users offer you free* access to their *nix servers, ops in channels, unlimited
leech access to the biggest and fastest warez sites *gasp* and more. They
want favours in return. They say they don't but they truely want something
in return. They -expect- something in return. You could either don't respond
to such offers, or use them. The last option creates an even more distorted
image of opers and doesn't do any good for the user -> oper relationship.
Your *real* friends are usually the persons who were your friends _before_
you acquired the extra privileges.

10. The TCM Bot

A TCM bot can be a valuable tool for opers. It keeps record of all connected
clients, flags clients with multiple connections and has all sorts of other
usefull commands. There are three different kind of TCM's in use on EFnet,
being Toast's TCM, TCM-Dianora and TCM-Hybrid. Every one of them requires you
to log in to be able to access the privileged commands. On Toast's TCM you
DCC chat the TCM bot and do '.auth yournick' where yournick is your oper name
in your o/O line. In TCM-Dianora and TCM-Hybrid you register with :
'.register yourpass', where yourpass is your password ;)
All TCM commands start with a period. If you forget the period, the text goes
into the 'partyline', where it is echoed to all connected opers.

A few TCM commands, and explanation what they do and how to use them...

