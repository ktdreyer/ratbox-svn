                                    KSERVER Challenge/Anti-hijack protocol
                                    ======================================
   (By A1kmm)

1.0: Goal of this protocol:
     ---------------------
To reduce the risk of attacks relating to password sniffing or connection hijacking of server to server
connections.

1.1: Conventions of this protocol/document:
     -------------------------------------
MUST means that a server is not "compliant" if it DOES NOT do this.
MUST NOT means that a server is not "compliant" if it DOES do this.
SHOULD means that a server is at most "conditionally compliant" if it DOES NOT do this.
SHOULD NOT means that a server is at most "conditionally compliant" if it DOES do this.
MAY/MAY NOT means that a server may choose whether or not to do this.
Any numbers(e.g. encrypted/decrypted) strings which are transmitted across the network in accordance with
this document shall be BASE64 encoded, with the most significant bits/bytes transmitted first, followed by
bits/bytes of decreasing significance.

2.0: Configuration of KSERVER links:
     ------------------------------
Every server which supports KSERVER links has an (RSA?) private key stored in a configuration file. Care must
be taken to ensure this file is accessible only to the ircd user.
For every KSERVER link(to another server supporting KSERVER), a public key is stored(instead of a password).
A server which is configured to make a KSERVER link to another server MUST NOT fall back onto any other
server authentification scheme regardless of what the remote server sends.

2.1: Connection initiation:
     ---------------------
When a server(I) wants to initiate a KSERVER link with another server(R), it MUST use R's public key
to encrypt a 64 byte string of random entropy from an SRNG. It then SHOULD send the CAPAB command with it's
capabilities, and then MUST send a KSERVER command. Any server which sends the KSERVER command SHOULD NOT send
a PASS command across KSERVER links, and MUST support the TS protocol. The server MUST NOT send a SERVER
command. Let E denote the encrypted 64 byte string. Then the format of the KSERVER command is:
I: KSERVER I's-name E :I's server description
The server SHOULD NOT send a SVINFO command or a connect burst yet, and MUST NOT accept commands which are
restricted to server links from the remote server at this point.
On receipt, R SHOULD check that the user@host for the remote server matches the configured value, and SHOULD
drop the link if it does not. R MUST then use its private key to decrypt the 64 byte string. Let M1 denote the
first 32 bytes of the decrypted string and M2 denote bytes 32-63. R will also generate another 64 byte string
of SRNG output entropy consisting of two(2) 32 byte parts N1 and N2, and will encrypt the entire string with
I's public key. It then sends the following response:
R: KSERVER R's-name M1 F :R's server description
R SHOULD then send the SVINFO command and do a normal connect burst(but see Section 2.2). It MUST NOT
accept commands which are restricted to server links from the remote server at this point.
Following sending this, R MAY discard M1. It MUST save M2, N1 and N2 at this point. Server's MUST NOT send
M2 or N2 across the network except in the encrypted forms E and F.
Following the receipt of this message by I, I MUST compare M1 with its locally stored copy. It MUST drop
the link to R if they do not match, otherwise it SHOULD consider R authenticated and accept server commands
from it. It MAY then discard the value of M1, but must store the value of M2. It MUST then use its private
key to decrypt N1 and N2 from F. It MUST then send the following response:
I: KSERVER N1
I SHOULD then send the SVINFO command, followed by a normal connect burst(but see Section 2.2). It MAY then
discard N1, but MUST retain N2 and M2.
On receipt of this by R, it MUST compare N1 with its locally stored copy. It MUST drop the link to I if they
do not match, otherwise it SHOULD consider I authenticated and accept server commands from it. R MAY discard
the value of N1 at this point, but SHOULD retain M2 and N2.

2.2: Message verification/hijack protection:
     --------------------------------------
This section applies to any KSERVER link between two servers(A and B), on any messages after KSERVER.
K refers to M2 if this server initiated the link, otherwise it refers to N2. L refers to N2 if this server
initiated the link, otherwise it refers to M2.
If A wishes to send a message to server B, it must, after evaluation any changes on the string(such as by
calling sprintf), A MUST calculate the MD5 checksum of the binary contents of L followed immediately by the
message, including the prefix, up to but excluding the line terminator(CR or LF). It MUST then prefix(in
BASE64) the MD5 value, followed by a space, followed by the message.
When B receives a message after the KSERVER handshake, it MUST MD5 checksum the value of K(in binary)
followed immediately by the message after and excluding the first space, and MUST compare the value obtained
with the value prefixed to the message. If they do not match, the message must be discarded. IRC Operators
or Administrators online MAY be notified of the mismatch. Otherwise the message after the space should be
processed normally.
