                                    CRYPTLINK Encrypted server link protocol
                                    ======================================
   (Loosely Based on draft by A1kmm)
   (Rewritten by David-T)

1.0: Goal of this protocol:
     ---------------------

	To reduce the risk of attacks relating to password sniffing,
	replay attacks, or connection hijacking allowing unauthorised
	access to server priviledges.

1.1: Conventions of this document:
     ----------------------------

	* MUST means that a server is not "compliant" unless it does this.
	* MUST NOT means that a server is not "compliant" if it does this.
	* SHOULD means that a server is at most "conditionally compliant"
	  if it does not do this.
	* SHOULD NOT means that a server is at most "conditionally compliant"
	  if it does this.
	* MAY means that a server may choose whether or not to do this.

1.2: Conventions of this protocol:
     ----------------------------

	This protocol is based on the IRC protocol as described in RFC1459,
	and extensions implemented on Efnet as described in other documents
	in this directory.

	Any encrypted strings which are transmitted in IRC commands in
	accordance with this document shall be BASE64 encoded, with the
	most significant bits of the most significant byte transmitted
	first, followed by bits/bytes of decreasing significance.  However,
	the encrypted link will be 8-bit, without any encoding.
  
2.0: Configuration of CRYPTLINK links:
     --------------------------------

	Every server which supports CRYPTLINK links has an RSA private key
	stored in a configuration file.  Care must be taken to ensure this
	file is accessible only to the ircd user.  For every link to another
 	server with CRYPTLINK support, the public component of that server's
	RSA key is stored instead of the traditional password or
	password hash.

	A server which is configured to make a CRYPTLINK link to another
	server MUST NOT fall back on to any other server authentification
	scheme regardless of what the remote server sends.

2.1: Key generation:
     --------------

	To initiate a CRYPTLINK link to another server, each server
	is required to generate 2 128-bit (4 byte) random keys.
	These keys MUST be generated by a cryptographically strong PRNG.

	These keys (as an 8 byte binary string) should then be encrypted
	to the other server's public key, and base64 encoded.

2.1: Key exchange:
     ------------

	Once the initiating server (server A) has connected to the
	remote server (server B), it SHOULD send the CAPAB command,
	listing its capabilities (including the new CRYPTLINK
	capability).

	It MUST then send a CRYPTSERV command as follows:

		CRYPTSERV <irc.server.name> <key> :<server info>

	(where <key> is the encoded, encrypted key)

	Servers MUST NOT send a PASS or initial SERVER command over
	a CRYPTLINK link.  However, SERVER commands are still used
	to introduce remote servers.  All CRYPTLINK links MUST
	support the TS protocol (as normally indicated by
	PASS ... :TS).

	/* XXX -- ziplinks compatability */
	/* XXX -- what cipher? */

	On receiving this command, server B MUST send its own
	CAPAB/CRYPTSERV commands, and then decrypt the keys, and
	using the first 4 byte key send a CRYPTAUTH command by
	base64 encoding the plaintext key:

		KAUTH <key>

	Once this command has been sent, the link MUST switch to being
	encrypted.  All future data sent over the link will be
	encrypted using a symmetric encryption cipher, with the
	second generated key.  At this point, Server B SHOULD send
	an SVINFO command, followed by a normal netburst.

	The second key will be used to decrypt data sent over the link.

	Server A MUST then send a KAUTH command, and
	and switch to an encrypted link as above.  It SHOULD then send
	an SVINFO command, and a normal netburst.

 	The encrypted link MUST be formatted in frames as follows:

	<u16-network-byte-order><8-bit data>
	 len			 data[len]

	Each frames SHOULD contain 1 line, although servers MAY
	store multiple lines in one frame.

2.2 Key regeneration:
    ----------------

	The servers SHOULD regenerate the session key they use to
	encrypt outgoing data every <how long?>.  They should
	generate a new key, encode it to the remote server's public
	key as in the initial key exchange, then send a
	CRYPTKEY command as follows:

	:<servername> CRYPTKEY <key>

	This command should (obviously) be encrypted by the original key
	the next line should be encrypted with the new key.

Last modified:	2001-04-12
