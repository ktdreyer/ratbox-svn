                                              MSGHASH Anti-hijack protocol
                                             =============================
   (Based on draft by A1kmm)
   (Rewritten by David-T)

Note:	This proposal is not anywhere near ready to be implemented.
	It also requires the KSERVER protocol to be implented, to provide
	each server with a secret for authenticating messages.

1.0: Goal of this protocol:
     ---------------------

	To reduce the risk of attacks relating to connection hijacking
	and other similar attacks.

1.1: Conventions of this document:
     ----------------------------

	* MUST means that a server is not "compliant" unless it does this.
	* MUST NOT means that a server is not "compliant" if it does this.
	* SHOULD means that a server is at most "conditionally compliant"
	  if it does not do this.
	* SHOULD NOT means that a server is at most "conditionally compliant"
	  if it does this.
	* MAY means that a server may choose whether or not to do this.

1.2: Conventions of this protocol:
     ----------------------------

	This protocol is based on the IRC protocol as described in RFC1459,
	and extensions implemented on Efnet as described in other documents
	in this directory.

	Any MD5 hashes which are transmitted across the network in
	accordance with this document shall be BASE64 encoded, with the
	most significant bits of the most significant byte transmitted
	first, followed by bits/bytes of decreasing significance.
  
2.0: Configuration of MD5HASH links:
     ------------------------------

	MD5HASH depends on the link being configured as a KSERVER link,
	and using RSA public key authentication.

	If two servers that support the KSERVER and MSGHASH capabilities
	link, they MUST using MSGHASH over that link.  The administrator
	MAY be allowed to disable MSGHASH, by allowing the MSGHASH
	capability to be disabled.

2.1: Protected messages:
     ------------------

	As computing an MD5 hash of every message sent and received
	between two servers would place an extremely high load on
	a server, some messages SHOULD NOT be protected.

	The two ends of a MSGHASH link MUST agree which commands are to
	be protected, otherwise any protection is lost, as a command
	without a hash attached could be injected.

	Therefore, the following commands MUST be protected, and
	all other commands MUST NOT be protected.

		/* commands affecting the whole network */
		SERVER
		SQUIT
		GLINE

		/* commands affecting an entire server */
		KLINE

		/* commands affecting a channel */
		KICK
		MODE
		SJOIN
		
		/* commands affecting a user */
		KILL

	Any commands introduced after this capability should be considered
	for inclusion on this list.

2.2: Message verification/hijack protection:
     --------------------------------------

	This section applies to any KSERVER link between two servers
	(A and B), on any messages after KSERVER.  Any MD5 hash received
	from a message from a client MUST be discarded, and the message
	SHOULD be processed normally.

	K refers to the last 32 bytes of the 64 byte random string
	generated by server A during the KSERVER authentication stage.
	(see kserver.txt)

        L refers to the last 32 bytes of the 64 byte random string
        generated by server B during the KSERVER authentication stage.
        (see kserver.txt)

	If A wishes to send a protected message to server B,
	A MUST calculate the MD5 checksum of the binary contents
	of L followed immediately by the message (in the form it
	will be transmitted to the network, including any prefix)
	up to but excluding the line terminator (CR or LF).  It MUST
	then prefix (in BASE64) the MD5 value, followed by the message,
	using the following format

		#<MD5 hash> [:prefix ]COMMAND arg1 arg2 ... :trailing arg

	When B receives a protected message after the KSERVER handshake,
	it MUST MD5 checksum the value of K (in binary) followed
	immediately by the message after and excluding the first space,
	and MUST compare the value obtained with the value prefixed
	to the message. If they do not match, the message MUST be
	discarded. IRC Operators or Administrators online MAY be
	notified of the mismatch.  Otherwise the message after the
	space SHOULD be processed normally.

Last Modified:	2001-04-08
