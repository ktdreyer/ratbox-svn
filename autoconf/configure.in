dnl $Id$

AC_INIT

AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADER(include/setup.h)
AC_PREFIX_DEFAULT(/usr/local/ratbox-services)

AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_YACC
AC_PROG_LEX
AC_PROG_RANLIB
AC_EXEEXT

AC_PATH_PROG(RM, rm)
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(MV, mv)
AC_PATH_PROG(AR, ar)

AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(crypt, crypt,,))

AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h stdlib.h stdarg.h string.h strings.h unistd.h errno.h getopt.h crypt.h)

AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(select strlcpy strlcat gethostbyname mmap getaddrinfo)

AC_MSG_CHECKING(Channel Service)
AC_ARG_ENABLE(chanserv,
[ --enable-chanserv         Enable Channel Service
 --disable-chanserv        Disable Channel Service],
[ cf_enable_chanserv=$enableval ],[ cf_enable_chanserv=yes ])

if test "X$cf_enable_chanserv" = "Xyes"; then
	S_CHANSERV="s_chanserv.c"
	AC_DEFINE(ENABLE_CHANSERV, 1, Channel Service)
	AC_MSG_RESULT(yes)
else
	S_CHANSERV=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(User Service)
AC_ARG_ENABLE(userserv,
[ --enable-userserv         Enable User Service
 --disable-userserv        Disable User Service],
[ cf_enable_userserv=$enableval ],[ cf_enable_userserv=yes ])

if test "X$cf_enable_chanserv" = "Xyes"; then
	cf_enable_userserv=yes
fi

if test "X$cf_enable_userserv" = "Xyes"; then
	S_USERSERV="s_userserv.c"
	AC_DEFINE(ENABLE_USERSERV, 1, User Service)
	AC_MSG_RESULT(yes)
else
	S_USERSERV=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(List Service)
AC_ARG_ENABLE(alis,
[ --enable-alis             Enable ALIS (List Service)
 --disable-alis            Disable (List Service)],
[ cf_enable_alis=$enableval ],[ cf_enable_alis=yes ])

if test "X$cf_enable_alis" = "Xyes"; then
	S_ALIS="s_alis.c"
	AC_DEFINE(ENABLE_ALIS, 1, List Service)
	AC_MSG_RESULT(yes)
else
	S_ALIS=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(Jupe Service)
AC_ARG_ENABLE(jupeserv,
[ --enable-jupeserv         Enable Jupe Service
 --disable-jupeserv        Disable Jupe Service],
[ cf_enable_jupe=$enableval ],[ cf_enable_jupe=yes ])

if test "X$cf_enable_jupe" = "Xyes"; then
	S_JUPESERV="s_jupeserv.c"
	AC_DEFINE(ENABLE_JUPESERV, 1, Jupe Service)
	AC_MSG_RESULT(yes)
else
	S_JUPESERV=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(Operbot Service)
AC_ARG_ENABLE(operbot,
[ --enable-operbot         Enable Operbot Service
 --disable-operbot        Disable Operbot Service],
 [ cf_enable_operbot=$enableval ],[ cf_enable_operbot=yes ])

if test "X$cf_enable_operbot" = "Xyes"; then
	S_OPERBOT="s_operbot.c"
	AC_DEFINE(ENABLE_OPERBOT, 1, Operbot Service)
	AC_MSG_RESULT(yes)
else
	S_OPERBOT=""
	AC_MSG_RESULT(no)
fi

dnl Try to find SQLite.
AC_CHECK_LIB([sqlite], [main], [SQLITE=yes], [SQLITE=no])
AC_ARG_WITH([sqlite], [], [SQLITE_DIR=$withval], [SQLITE_DIR=no])
SQLITE_INCLUDES=no

if test $SQLITE = "no" ; then
        AC_MSG_CHECKING(for sqlite)
        if test $SQLITE_DIR != "no" ; then
                if test -f "$SQLITE_DIR/lib/libsqlite.so" ; then
                        SQLITE="$SQLITE_DIR/lib"
                        AC_MSG_RESULT($SQLITE)
                fi
                  
                if test -f "$SQLITE_DIR/include/sqlite.h" ; then
                        SQLITE_INCLUDES="$SQLITE_DIR/include"
                fi
        else
                if test -f "/usr/lib/libsqlite.so" ; then
                        SQLITE="/usr/lib/libsqlite.so"
                        AC_MSG_RESULT($SQLITE)
                elif test -f "/usr/local/lib/libsqlite.so" ; then
                        SQLITE="/usr/local/lib"
                        AC_MSG_RESULT($SQLITE)
                fi
                  
                if test -f "/usr/include/sqlite.h" ; then
                        SQLITE_INCLUDES="/usr/include"
                elif test -f "/usr/local/include/sqlite.h" ; then
                        SQLITE_INCLUDES="/usr/local/include"
                fi
        fi
fi

if test $SQLITE = "no" || test $SQLITE_INCLUDES = "no" ; then
        AC_MSG_RESULT(no)
        echo "Cannot find SQLite. Please specify search path with --with-sqlite=DIR"
        exit
else
        LIBS="$LIBS -lsqlite"
        LDFLAGS="$LDFLAGS -L$SQLITE"
fi

AC_SUBST(SQLITE)
AC_SUBST(SQLITE_INCLUDES)

AC_SUBST(S_CHANSERV)
AC_SUBST(S_USERSERV)
AC_SUBST(S_ALIS)
AC_SUBST(S_JUPESERV)
AC_SUBST(S_OPERBOT)

AC_OUTPUT(			\
	Makefile		\
        help/Makefile   	\
	src/Makefile		\
)
