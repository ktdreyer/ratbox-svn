dnl $Id$

AC_INIT

AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADER(include/setup.h)
AC_PREFIX_DEFAULT(/usr/local/ratbox-services)

AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_YACC
AC_PROG_LEX
AC_PROG_RANLIB
AC_EXEEXT

AC_PATH_PROG(RM, rm)
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(MV, mv)
AC_PATH_PROG(AR, ar)

AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(crypt, crypt,,))

AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h stdlib.h stdarg.h string.h strings.h unistd.h errno.h getopt.h crypt.h)

AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(select strlcpy strlcat gethostbyname mmap getaddrinfo)

AC_MSG_CHECKING(Channel Service)
AC_ARG_ENABLE(chanserv,
[ --enable-chanserv         Enable Channel Service
 --disable-chanserv        Disable Channel Service],
[ cf_enable_chanserv=$enableval ],[ cf_enable_chanserv=yes ])

if test "X$cf_enable_chanserv" = "Xyes"; then
	S_CHANSERV="s_chanserv.c"
	AC_DEFINE(ENABLE_CHANSERV, 1, Channel Service)
	AC_MSG_RESULT(yes)
else
	S_CHANSERV=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(User Service)
AC_ARG_ENABLE(userserv,
[ --enable-userserv         Enable User Service
 --disable-userserv        Disable User Service],
[ cf_enable_userserv=$enableval ],[ cf_enable_userserv=yes ])

if test "X$cf_enable_chanserv" = "Xyes"; then
	cf_enable_userserv=yes
fi

if test "X$cf_enable_userserv" = "Xyes"; then
	S_USERSERV="s_userserv.c"
	AC_DEFINE(ENABLE_USERSERV, 1, User Service)
	AC_MSG_RESULT(yes)
else
	S_USERSERV=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(Oper Service)
AC_ARG_ENABLE(operserv,
[ --enable-operserv         Enable Oper Service
 --disable-operserv        Disable Oper Service],
[ cf_enable_operserv=$enableval ],[  cf_enable_operserv=yes ])

if test "X$cf_enable_operserv" = "Xyes"; then
 	S_OPERSERV="s_operserv.c"
	AC_DEFINE(ENABLE_OPERSERV, 1, Oper Service)
	AC_MSG_RESULT(yes)
else
	S_OPERSERV=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(List Service)
AC_ARG_ENABLE(alis,
[ --enable-alis             Enable ALIS (List Service)
 --disable-alis            Disable (List Service)],
[ cf_enable_alis=$enableval ],[ cf_enable_alis=yes ])

if test "X$cf_enable_alis" = "Xyes"; then
	S_ALIS="s_alis.c"
	AC_DEFINE(ENABLE_ALIS, 1, List Service)
	AC_MSG_RESULT(yes)
else
	S_ALIS=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(Jupe Service)
AC_ARG_ENABLE(jupeserv,
[ --enable-jupeserv         Enable Jupe Service
 --disable-jupeserv        Disable Jupe Service],
[ cf_enable_jupe=$enableval ],[ cf_enable_jupe=yes ])

if test "X$cf_enable_jupe" = "Xyes"; then
	S_JUPESERV="s_jupeserv.c"
	AC_DEFINE(ENABLE_JUPESERV, 1, Jupe Service)
	AC_MSG_RESULT(yes)
else
	S_JUPESERV=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(Operbot Service)
AC_ARG_ENABLE(operbot,
[ --enable-operbot          Enable Operbot Service
 --disable-operbot         Disable Operbot Service],
 [ cf_enable_operbot=$enableval ],[ cf_enable_operbot=yes ])

if test "X$cf_enable_operbot" = "Xyes"; then
	S_OPERBOT="s_operbot.c"
	AC_DEFINE(ENABLE_OPERBOT, 1, Operbot Service)
	AC_MSG_RESULT(yes)
else
	S_OPERBOT=""
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(Global Service)
AC_ARG_ENABLE(global,
[ --enable-global           Enable global messaging service
 --disable-global          Disable global messaging service],
 [ cf_enable_global=$enableval ],[ cf_enable_global=yes ])

if test  "X$cf_enable_global" =  "Xyes"; then
	S_GLOBAL="s_global.c"
	AC_DEFINE(ENABLE_GLOBAL, 1, Global Messaging Service)
	AC_MSG_RESULT(yes)
else
	S_GLOBAL=""
	AC_MSG_RESULT(no)
fi

dnl Try to find SQLite.
SQLITE_INCLUDES=""
AC_ARG_WITH([sqlite],
[ --with-sqlite=DIR         Path to search for sqlite], 
[SQLITE_DIR=$withval], [SQLITE_DIR="/usr"])

AC_CHECK_HEADER(sqlite.h, [], [
	AC_MSG_CHECKING(for sqlite.h in given path)
	if test -f "$SQLITE_DIR/include/sqlite.h"; then
		SQLITE_INCLUDES="-I $SQLITE_DIR/include/"
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
		echo "Cannot find SQLite headers.  Please specify search path --with-sqlite=DIR"
		exit
	fi
], [])

AC_CHECK_LIB([sqlite], [main], [], [
	AC_MSG_CHECKING(for main in -lsqlite in given path)

	if test -e "$SQLITE_DIR/lib/libsqlite.so"; then
		LDFLAGS="$LDFLAGS -L$SQLITE_DIR/lib/"
		LIBS="$LIBS -lsqlite"
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
		echo "Cannot find SQLite library libsqlite.so.  Please specify search path --with-sqlite=DIR"
		exit
	fi
])


AC_SUBST(SQLITE_INCLUDES)

AC_SUBST(S_CHANSERV)
AC_SUBST(S_USERSERV)
AC_SUBST(S_OPERSERV)
AC_SUBST(S_ALIS)
AC_SUBST(S_JUPESERV)
AC_SUBST(S_OPERBOT)
AC_SUBST(S_GLOBAL)

AC_OUTPUT(			\
	Makefile		\
        help/Makefile   	\
	src/Makefile		\
)

echo
echo Compiling ratbox-services
echo Installing into: $prefix
echo
echo User Services ............ $cf_enable_userserv
echo Channel Services ......... $cf_enable_chanserv
echo Oper Services ............ $cf_enable_operserv
echo Jupe Services ............ $cf_enable_jupe
echo Oper invite/op bot ....... $cf_enable_operbot
echo Global Message Service ... $cf_enable_global
echo List Service ............. $cf_enable_alis
echo
