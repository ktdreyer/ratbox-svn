dnl $Id$
dnl Process this file with autoconf to produce a configure script.
AC_INIT(include/class.h)

AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADER(include/setup.h)
AC_PREFIX_DEFAULT(/usr/local/ircd)

PACKAGE=ircd-hybrid
VERSION=7.0
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX
AC_CANONICAL_SYSTEM
AC_PROG_MAKE_SET
AC_PATH_PROG(RM, rm)
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(MV, mv)
AC_PATH_PROG(SED, sed)
AC_PROG_INSTALL
AC_PROG_LEX

dnl use directory structure of cached as default (hack)
if test "$libexecdir" = '${exec_prefix}/libexec' &&
   test "$localstatedir" = '${prefix}/var'; then
        libexecdir='${bindir}'
        localstatedir='${prefix}'
fi 

dnl Checks for libraries.
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_FUNC(res_mkquery,, AC_CHECK_LIB(resolv, res_mkquery))
AC_CHECK_LIB(socket, socket)
AC_CHECK_FUNC(dlopen,, AC_CHECK_LIB(dl, dlopen,,AC_MSG_ERROR(**
dlopen could not be found - ircd-hybrid will not compile without it **)))
AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(descrypt, crypt,,AC_CHECK_LIB(crypt, crypt,,)))

dnl Check for gettext, but it's ok if we don't have it.
AC_CHECK_FUNCS(gettext,, AC_CHECK_LIB(intl, gettext,,))

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/param.h unistd.h errno.h string.h sys/syslog.h stdlib.h stddef.h getopt.h) 

dnl Check for stdarg.h - if we can't find it, halt configure
AC_CHECK_HEADER(stdarg.h, , AC_MSG_ERROR(** stdarg.h could not be found - ircd-hybrid will not compile without it **))

dnl openssl?
AC_ARG_ENABLE(openssl,
[ --enable-openssl      Enable openssl-dependant crypto functions.
  --disable-openssl     Disable openssl-dependant crypto functions. ],

[
  case "$enableval" in
  yes)
    ac_cv_func_openssl='yes'
    ;;
  no)
    ac_cv_func_openssl='no'
    ;;
  esac
])

dnl check for netio plugin stuff
dnl Enable poll()
AC_ARG_ENABLE(poll,
[ --enable-poll		Enable poll() support.
  --disable-poll	Disable poll() support. ],

[
  case "$enableval" in
  yes)
    echo "Forcing poll() to be enabled"
    ac_cv_func_poll='yes'
    ;;
  no)
    echo "Forcing poll() to be disabled"
    ac_cv_func_poll='no'
    ;;
  esac
])

dnl Enable select()
AC_ARG_ENABLE(select,
[ --enable-select	Enable select() support.
  --disable-select	Disable select() support. ],

[
  case "$enableval" in
  yes)
    echo "Forcing select() to be enabled"
    ac_cv_func_select='yes'
    ;;
  no)
    echo "Forcing select() to be disabled"
    ac_cv_func_select='no'
    ;;
  esac
])

dnl Enable kqueue()
AC_ARG_ENABLE(kqueue,
[ --enable-kqueue	Enable kqueue() support.
  --disable-kqueue	Disable kqueue() support. ],

[
  case "$enableval" in
  yes)
    echo "Forcing kqueue() to be enabled"
    ac_cv_func_kqueue='yes'
    ;;
  no)
    echo "Forcing kqueue() to be disabled"
    ac_cv_func_kqueue='no'
  ;;
esac
])


dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

dnl checl for openssl
AC_CHECK_FUNC(openssl, ac_cv_func_openssl='yes',)

dnl check for poll() call
AC_CHECK_FUNC(poll, ac_cv_func_poll='yes',)

dnl taken from ircd's Config script
AC_MSG_CHECKING(for non-blocking socket implementation)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined(O_NONBLOCK)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NONBLOCK))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_POSIX) AC_MSG_RESULT( O_NONBLOCK ),, AC_MSG_RESULT( cross compiling ))

AC_MSG_CHECKING(for mmap support)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>
int main() {
  return mmap((caddr_t)0, (off_t)0, PROT_READ, MAP_SHARED, 0, (off_t)0); 
}
], AC_DEFINE(USE_MMAP) AC_MSG_RESULT(yes),AC_MSG_RESULT(no), AC_MSG_RESULT( unable to test ))

AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined( O_NDELAY ) && !defined( NBLOCK_POSIX )
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NDELAY))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_BSD) AC_MSG_RESULT( O_NDELAY ),, AC_MSG_RESULT(unable to test))

AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if !defined(NBLOCK_BSD) && !defined(NBLOCK_POSIX) && defined(FIONBIO)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, FIONBIO))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif /* !NBLOCK_POSIX && !NBLOCK_BSD && FIONBIO */
	exit(1);
}
], AC_DEFINE(NBLOCK_SYSV) AC_MSG_RESULT(FIONBIO),, AC_MSG_RESULT(unable to test))

dnl don't add more of these unless it's critical.  Trying to get rid of them.
AC_MSG_CHECKING(operating system)
case "$target" in
*-solaris2*) AC_DEFINE(OS_SOLARIS2) AC_MSG_RESULT(Solaris 2.x) ;;
*) AC_MSG_RESULT(nothing special required) ;;
esac

dnl Magic which checks whether we are forcing a type of comm loop we
dnl are actually going to (ab)use

dnl Actually do the define magic now
dnl mostly ripped from squid-commloops, thanks to adrian and benno
if test "$ac_cv_func_kqueue" = "yes" ; then
        SELECT_TYPE="kqueue"   
elif test "$ac_cv_func_devpoll" = "yes" ; then
        SELECT_TYPE="devpoll"
        AC_DEFINE(HAVE_DEVPOLL)
elif test "$ac_cv_func_poll" = "yes" ; then
        SELECT_TYPE="poll"
elif test "$ac_cv_func_select" = "yes" ; then
        SELECT_TYPE="select"
else
        echo "Eep!  Can't find kqueue, devpoll, poll _or_ select!"
        echo "I'll try select and hope for the best."
        SELECT_TYPE="select"
fi
echo "Using ${SELECT_TYPE} for select loop."
SELECT_SRC="s_bsd_${SELECT_TYPE}.c"
AC_DEFINE_UNQUOTED(SELECT_TYPE, "$SELECT_TYPE")
AC_SUBST(SELECT_SRC)

dnl set a define for openssl if we are doing that
if test "$ac_cv_func_openssl" = "yes" ; then
        echo "Building with openssl."
        SSL_DEFINE="-DOPENSSL"
        SSL_LIBS="-lcrypto"
else
        SSL_DEFINE=""
        SSL_LIBS=""
fi
AC_SUBST(SSL_DEFINE)
AC_SUBST(SSL_LIBS)

if test "$ac_cv_func_gettext" = "yes" ; then
	echo "Building with gettext."
	MSGFMT="msgfmt -o"
else
	MSGFMT="echo"
fi

AC_SUBST(MSGFMT)

AC_OUTPUT(                   \
 Makefile                    \
 iauth/Makefile              \
 iauth/source/Makefile       \
 src/Makefile                \
 messages/Makefile           \
 modules/Makefile            \
 tools/Makefile              \
 doc/Makefile                \
)
