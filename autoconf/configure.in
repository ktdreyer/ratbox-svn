dnl $Id$
dnl Process this file with autoconf to produce a configure script.
AC_INIT(include/class.h)

AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADER(include/setup.h servlink/setup.h)
AC_PREFIX_DEFAULT(/usr/local/ircd)

PACKAGE=ircd-hybrid
VERSION=7.0
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl Checks for programs.
AC_PROG_CC

if test "x$CFLAGS" = "x"; then
	if test "x$GCC" = "xyes"; then
	  CFLAGS="-g -O2 -Wunused -Wall -ggdb -Wshadow -Wmissing-declarations"
	else
	  CFLAGS="-g"
	fi
fi

AC_ISC_POSIX
AC_PROG_MAKE_SET
AC_PATH_PROG(RM, rm)
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(MV, mv)
AC_PATH_PROG(SED, sed)
AC_PATH_PROG(AR, ar)
AC_PROG_YACC
AC_PROG_INSTALL
AC_PROG_LEX
AC_PROG_RANLIB

dnl use directory structure of cached as default (hack)
if test "$libexecdir" = '${exec_prefix}/libexec' &&
   test "$localstatedir" = '${prefix}/var'; then
        libexecdir='${bindir}'
        localstatedir='${prefix}'
fi 

dnl Checks for libraries.
AC_CHECK_LIB(socket, socket)

AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(descrypt, crypt,,AC_CHECK_LIB(crypt, crypt,,)))

dnl check for gettext in base system or /usr/[local/]lib/libintl.a
AC_SEARCH_LIBS(gettext, intl,,,)
if test "X$ac_cv_search_gettext" = "Xno"; then
    save_LIBS="$LIBS"
    LIBS="$LIBS -L/usr/local/lib"
    unset ac_cv_search_gettext
    AC_SEARCH_LIBS(gettext, intl,,,)
    if test "X$ac_cv_search_gettext" != "Xno"; then
        gettext_libs="-L/usr/local/lib"
        gettext_incl="-I/usr/local/include"
    fi
    LIBS="$save_LIBS"
fi

dnl make sure we cache any special flags we used, as autoconf
dnl will cache the 'found gettext' result, and otherwise we'll never realise
dnl we need them!
AC_CACHE_CHECK(ld flags needed for gettext, cf_cv_gettext_libs,
               [ cf_cv_gettext_libs="$gettext_libs" ])
AC_CACHE_CHECK(cpp flags needed for gettext, cf_cv_gettext_incl,
               [ cf_cv_gettext_incl="$gettext_incl" ])

LIBS="$LIBS $cf_cv_gettext_libs"
CPPFLAGS="$CPPFLAGS $cf_cv_gettext_incl"

AC_CHECK_FUNCS(gettext,, AC_CHECK_LIB(intl, gettext)) 

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/param.h unistd.h errno.h string.h strings.h sys/syslog.h stdlib.h stddef.h getopt.h) 

dnl See whether we can include both string.h and strings.h.
AC_DEFUN(GCC_HEADER_STRING,
[AC_CACHE_CHECK([whether string.h and strings.h may both be included],
 gcc_cv_header_string,
[AC_TRY_COMPILE([#include <string.h>
#include <strings.h>], , gcc_cv_header_string=yes, gcc_cv_header_string=no)])
if test $gcc_cv_header_string = yes; then
 AC_DEFINE(STRING_WITH_STRINGS)
fi
])

GCC_HEADER_STRING

dnl check for socklen_t
dnl we can't use ac_check_Type because it doesnt include the required files

AC_DEFUN(CHECK_SOCKLEN_T,
[
	AC_MSG_CHECKING(for socklen_t)
	AC_CACHE_VAL(have_socklen_t,
	[
		AC_TRY_COMPILE(
                        [#include <sys/types.h>
			#include <sys/socket.h>],
			[socklen_t xxx = 75;],
			have_socklen_t=yes,
			have_socklen_t=no)
	])
	AC_MSG_RESULT($have_socklen_t)
	if test "$have_socklen_t" = yes; then
		AC_DEFINE(HAVE_SOCKLEN_T)
	fi
])

CHECK_SOCKLEN_T

dnl Check for stdarg.h - if we can't find it, halt configure
AC_CHECK_HEADER(stdarg.h, , AC_MSG_ERROR(** stdarg.h could not be found - ircd-hybrid will not compile without it **))

dnl Checks for the existance of strlcat

AC_CHECK_FUNCS(strlcat strlcpy)

dnl check for socketpair
AC_CHECK_FUNCS(socketpair)

dnl Look for definitions such as RLIMIT_FDMAX, RLIMIT_NOFILE, and
dnl RLIMIT_OPEN_MAX.  These are used for getrlimit().
dnl NOTE: It seems stock autoconf doesn't use the -dM flag for cpp.
dnl       We need this for the following tests to work.
cpp_flags_backup="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -dM"
AC_MSG_CHECKING(for getrlimit max open files parameter)
AC_EGREP_HEADER(RLIMIT_FDMAX, sys/resource.h,
		cf_rlimit_type="RLIMIT_FDMAX")
AC_EGREP_HEADER(RLIMIT_NOFILE, sys/resource.h,
		cf_rlimit_type="RLIMIT_NOFILE")
AC_EGREP_HEADER(RLIMIT_OPEN_MAX, sys/resource.h,
		cf_rlimit_type="RLIMIT_OPEN_MAX")
CPPFLAGS="$cpp_flags_backup"
unset cpp_flags_backup
AC_DEFINE_UNQUOTED(RLIMIT_FD_MAX, $cf_rlimit_type)
AC_MSG_RESULT($cf_rlimit_type)


dnl openssl?
AC_MSG_CHECKING(if you want to try to use OpenSSL)
AC_ARG_ENABLE(openssl,
    [ --enable-openssl      Enable openssl-dependant crypto functions.
      --disable-openssl     Disable openssl-dependant crypto functions. ],
    [ cf_enable_openssl=$enableval ],
    [ cf_enable_openssl='yes' ])
AC_MSG_RESULT($cf_enable_openssl)

dnl If we want openssl, check for it
if test "X$cf_enable_openssl" = "Xyes"; then
    dnl Check for ciphers supported by OpenSSL crypto lib
    AC_CHECK_LIB(crypto, RSA_free)
    if test "X$ac_cv_lib_crypto_RSA_free" = "Xyes"; then
        AC_MSG_CHECKING(for required OpenSSL version)
        AC_TRY_RUN(
        [
#include <openssl/opensslv.h>
int main() {
  if (OPENSSL_VERSION_NUMBER < 0x00906000)
    exit(1);
  exit(0);
}
        ],, ac_cv_lib_crypto_RSA_free='no', ac_cv_lib_crypto_RSA_free='no')

        if test "X$ac_cv_lib_crypto_RSA_free" = "Xyes"; then
            AC_MSG_RESULT(ok)
            AC_CHECK_FUNCS(EVP_bf_cfb)
            AC_CHECK_FUNCS(EVP_cast5_cfb)
            AC_CHECK_FUNCS(EVP_des_cfb)
            AC_CHECK_FUNCS(EVP_des_ede3_cfb)
            AC_CHECK_FUNCS(EVP_idea_cfb)
            AC_CHECK_FUNCS(EVP_rc5_32_12_16_cfb)
        else
            AC_MSG_RESULT(OpenSSL version below 0.9.6 - OpenSSL support disabled)
        fi
    fi
fi

dnl zlib?
AC_MSG_CHECKING(if you want to try to use zlib)                              
AC_ARG_ENABLE(zlib,
    [ --enable-zlib         Enable zlib compression (used by ziplinks)
      --disable-zlib        Disable zlib compression (used by ziplinks) ],
    [ cf_enable_zlib=$enableval ],
    [ cf_enable_zlib='yes' ])
AC_MSG_RESULT($cf_enable_zlib)

if test "X$cf_enable_zlib" = "Xyes"; then
    AC_CHECK_LIB(z, deflate)
fi

dnl check for netio plugin stuff
dnl Enable poll()
AC_ARG_ENABLE(poll,
    [ --enable-poll             Enable poll() support.
      --disable-poll		Disable poll() support. ],
[
  case "$enableval" in
  yes)
    echo "Forcing poll() to be enabled"
    ac_cv_func_poll='yes'
    ;;
  no)
    echo "Forcing poll() to be disabled"
    ac_cv_func_poll='no'
    ;;
  esac
])

dnl Enable select()
AC_ARG_ENABLE(select,
[ --enable-select	Enable select() support.
  --disable-select	Disable select() support. ],
[
  case "$enableval" in
  yes)
    echo "Forcing select() to be enabled"
    ac_cv_func_select='yes'
    ;;
  no)
    echo "Forcing select() to be disabled"
    ac_cv_func_select='no'
    ;;
  esac
])

dnl Enable kqueue()
AC_ARG_ENABLE(kqueue,
[ --enable-kqueue	Enable kqueue() support.
  --disable-kqueue	Disable kqueue() support. ],
[
  case "$enableval" in
  yes)
    echo "Forcing kqueue() to be enabled"
    ac_cv_func_kqueue='yes'
    ;;
  no)
    echo "Forcing kqueue() to be disabled"
    ac_cv_func_kqueue='no'
  ;;
esac
])

dnl Enable devpoll
AC_ARG_ENABLE(devpoll,
[ --enable-devpoll	Enable /dev/poll support.
  --disable-devpoll	Disable /dev/poll support. ],
[
  case "$enableval" in
  yes)
    echo "Forcing devpoll to be enabled"
    ac_cv_func_devpoll='yes'
    ;;
  no)
    echo "Forcing devpoll to be disabled"
    ac_cv_func_devpoll='no'
  ;;
esac
])

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

AC_CHECK_TYPE(u_int32_t, unsigned long)

rm -f conftest conftest.f
dnl check for poll() call
AC_CHECK_FUNC(poll, ac_cv_func_poll='yes',)

dnl Magic which checks whether we are forcing a type of comm loop we
dnl are actually going to (ab)use

dnl Actually do the define magic now
dnl mostly ripped from squid-commloops, thanks to adrian and benno

if test "$ac_cv_func_kqueue" = "yes" ; then
        SELECT_TYPE="kqueue"   
	AC_DEFINE(USE_KQUEUE)
elif test "$ac_cv_func_devpoll" = "yes" ; then
        SELECT_TYPE="devpoll"
        AC_DEFINE(HAVE_DEVPOLL)
	AC_DEFINE(USE_DEVPOLL)
elif test "$ac_cv_func_poll" = "yes" ; then
        SELECT_TYPE="poll"
	AC_DEFINE(USE_POLL)
elif test "$ac_cv_func_select" = "yes" ; then
        SELECT_TYPE="select"
	AC_DEFINE(USE_SELECT)
else
        echo "Eep!  Can't find kqueue, devpoll, poll _or_ select!"
        echo "I'll try select and hope for the best."
        SELECT_TYPE="select"
	AC_DEFINE(USE_SELECT)
fi
echo "Using ${SELECT_TYPE} for select loop."
AC_DEFINE_UNQUOTED(SELECT_TYPE, "$SELECT_TYPE")
AC_SUBST(SELECT_SRC)

if test "$ac_cv_func_gettext" = "yes" -o "$ac_cv_lib_intl_gettext" = "yes"; then
	echo "Building with gettext."
	MSGFMT="msgfmt -o"
	SUBDIR_MESSAGES="messages"
        AC_DEFINE(HAVE_GETTEXT)
else
	MSGFMT="echo"
	SUBDIR_MESSAGES=""
fi

dnl ipv6?
AC_ARG_ENABLE(ipv6,
    [ --enable-ipv6	        Enable IPV6 support.
      --disable-ipv6            Disable IPV6 support. ],
    [ ac_cv_ipv6=$enableval ], [ ac_cv_ipv6='no' ])

if test "$ac_cv_ipv6" = "yes" ; then
	AC_DEFINE(IPV6)
	echo "Using IPv6 support"
fi


dnl shared-modules
AC_ARG_ENABLE(shared-modules,
[ --enable-shared-modules      Enable shared modules.
  --disable-shared-modules     Disable shared modules. ],

[ 
  if test "$enableval" = "no"; then
	ac_cv_shared_modules="no"
  else
	ac_cv_shared_modules="yes"   
  fi
])

if test "$ac_cv_shared_modules" = "no"; then
	echo "Not using shared modules.."
	MODULES_DEFINE=""
	MOD_TARGET="libmodules.a"
	MODULES_LIBS="../modules/libmodules.a"
	AC_DEFINE(STATIC_MODULES)
else
	echo "Checking for shared module support"
	MODULES_DEFINE=""
	MODULES_LIBS=""
	MOD_TARGET="shared_modules"
	
	AC_CHECK_FUNC(dlopen,, AC_CHECK_LIB(dl, dlopen,,AC_MSG_ERROR(**
	dlopen could not be found - try running configure with --disable-shared-modules)))

	# The GNU linker requires the -export-dynamic option to make
	# all symbols visible in the dynamic symbol table.
	hold_ldflags=$LDFLAGS
	AC_MSG_CHECKING(for the ld -export-dynamic flag)
	LDFLAGS="${LDFLAGS} -Wl,-export-dynamic"
	AC_TRY_LINK(, [int i;], found=yes, found=no)
	LDFLAGS=$hold_ldflags
	AC_MSG_RESULT($found)
	if test $found = yes; then
		LDFLAGS="${LDFLAGS} -Wl,-export-dynamic"
	fi

	AC_MSG_CHECKING(for compiler option to produce PIC)
	if test "$ac_cv_prog_gcc" = "yes"; then
		AC_MSG_RESULT(gcc: -fPIC -DPIC -shared)
		PICFLAGS="-fPIC -DPIC -shared"
	else
		case `uname -s` in
		SunOS*) 
			AC_MSG_RESULT(SunOS - Assuming Sun Workshop compiler: -KPIC -DPIC -G)
			PICFLAGS="-KPIC -DPIC -G"
		;;
		*)
			AC_MSG_RESULT(no)
			AC_MSG_ERROR(could not find a way to produce position independent code. Try ./configure  --disable-shared-modules)
		;;
		esac
	fi
	AC_SUBST(PICFLAGS)

	nlist_lib=""
	AC_CHECK_FUNC(nlist,,
   		AC_CHECK_LIB(dl, nlist, nlist_lib="-ldl",
   			AC_CHECK_LIB(elf, nlist, nlist_lib="-lelf",
			AC_MSG_WARN(** cannot locate nlist() **))
		)
	)

	dnl We need to find out whether underscores are appended to symbol names in executable
	dnl files.  First, though, we need to see where nlist.h is hiding.
	AC_CHECK_HEADER(libelf/nlist.h, [ nlist_h="libelf/nlist.h" ], )
	AC_CHECK_HEADER(elf/nlist.h, [ nlist_h="elf/nlist.h" ], )
	AC_CHECK_HEADER(nlist.h, [ nlist_h="nlist.h" ] , )
	if test x"$nlist_h" = "x"; then
		AC_MSG_WARN(** cannot locate an nlist.h **)
	fi
	AC_MSG_CHECKING(for extra underscores prepended to symbol names)
	AC_CACHE_VAL(symbol_underscores, 
	[
cat << EOF > conftest.c
	#include <$nlist_h>
	#include <stdio.h>
	void _modinit(void);
	int main(int argc, char *argv[[]]) {
        	int i;
        	struct nlist nl[[4]];
	
        	/* fill the names in this way, so it'll work almost everywhere */
        	nl[[0]].n_name = "_modinit";
        	nl[[1]].n_name = "__modinit";
        	nl[[2]].n_name = "___modinit";
        	nl[[3]].n_name = "____modinit";
        	nl[[0]].n_value = nl[[1]].n_value = nl[[2]].n_value = nl[[3]].n_value =
                	nl[[4]].n_name = NULL;

	        if(argc < 2)
      		          exit(-1);

   	        i = nlist(argv[[1]], nl);
        	if(i == -1)
                exit(-1);
	
        	for(i=0; i<4; i++) {
                	if(nl[[i]].n_value != NULL) {
						int j;
						for(j=0; j<i; j++) {
							printf("_");
						}
        	            exit(i);
					}
        	}
   		     exit(-1);
	}
	void _modinit(void) {
        	return;
	}
EOF
		$CC $CFLAGS -o conftest conftest.c $nlist_lib >/dev/null 2>&1
		symbol_underscores=`./conftest conftest`
		AC_MSG_RESULT($symbol_underscores)
		$RM -f conftest conftest.c
	])
	AC_DEFINE_UNQUOTED(SYMBOL_PREFIX, "${symbol_underscores}")
fi 
AC_SUBST(MODULES_DEFINE)
AC_SUBST(MODULES_LIBS)  
AC_SUBST(MOD_TARGET)   



AC_SUBST(INCDEP)

AC_SUBST(SUBDIR_MESSAGES)

AC_SUBST(LDFLAGS)
AC_SUBST(MSGFMT)

AC_OUTPUT(                      \
 Makefile                       \
 iauth/Makefile                 \
 iauth/source/Makefile          \
 servlink/Makefile              \
 contrib/Makefile               \
 src/Makefile                   \
 adns/Makefile		        \
 include/Makefile               \
 messages/Makefile              \
 messages/translations/Makefile \
 modules/Makefile               \
 tools/Makefile                 \
 doc/Makefile                   \
 gnats/Makefile                 \
 gnats/send-pr                  \
)
